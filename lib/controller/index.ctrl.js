/** * index.ctrl */+ function(app) {    app    // index    .controller('index.ctrl', [        '$scope', 'langService','modalService','$rootScope','$filter','selectService',        function($scope, langService, modalService,$rootScope,$filter,selectService) {            $scope.druid = $rootScope.druid = {                phone: "+86-028-85929148",                hrEmail: "hr@druid.tech",                helpEmail: "help@druid.tech",                saleEmail: "sales@druid.tech",                address: $filter("chFilter")("druid_location"),            };            var pagesizes = $scope.paginationPageSizes = selectService.getSelect('pagination');            init();            function init() {                // 初始化页数                $scope.currentPage = 1;                $scope.pageLimit = pagesizes[0];                $scope.rowHeight = 56;                $scope.paginationPage = "/discovery/part_pagination.html"; //pagination page            }            $scope.confirmSure = function () {            }            $scope.confirmCancel = function () {                            }            $rootScope.$on('initUserProfile',function (event, args) {                if(args){                    $scope.setProfile = args;                    $scope.pageLimit = args.page_size;                    $scope.currentLang = args.language;                    var pathName = window.location.pathname;                    if(args.language === 0 && pathName.indexOf('/en') < 0){                        window.location.pathname = pathName + "en/";//"/en/";                    }else if(args.language === 1 && pathName.indexOf('/en') > 0){                        window.location.pathname = pathName.slice(0,-3);//"/";                    }                }else{                    console.log('no profile');                }            });        }    ])    // home    .controller('home.ctrl',[        '$scope','$filter','$timeout','langService','timeService','accountService', 'authService','httpService','messageService','searchService', '$state','modalService','selectService','$rootScope',        function ($scope,$filter,$timeout, langService,timeService,accountService, authService,httpService,messageService,searchService, $state,modalService,selectService,$rootScope) {            $scope.message = [];            $scope.unMessage = [];            var user = $scope.user = $rootScope.accountLogin;            // var websocket = messageService.openWS();            // 加载中 modal            // $scope.$emit('showLoading', "loading");            var curPath = window.location.pathname;            // if(curPath.indexOf("/en") >= 0){            //     $scope.currentLang = 0;            // }else{            //     $scope.currentLang = 1;            // }            init();            function init() {                $scope.languageEnabled = timeService.getLanguageEnabled();                $scope.globalTimeZone = timeService.getGloableTimeZone();                $scope.infoPic = {                    username: '/images/icon/icon-user1818.png',                    email: '/images/icon/icon-email1815.png',                    phone: '/images/icon/icon-phone1818.png',                    address: '/images/icon/icon-location1518.png',                    role: '/images/icon/icon-role1814.png',                    company_name: '/images/icon/icon-company1815.png',                };                $scope.searchType = ["mark","uuid"];                $scope.searchInput = ["number","text"];                $scope.searchTypeIndex = false;                if(!authService.getAuth()){                    authService.logout();                    // $scope.$emit('hideLoading', "loading");                    modalService.hideLoading();                }else{                    // getMe();                    // $scope.navs = user && httpService.getNav(user.role);                    $scope.$emit('hideLoading', "loading");                    getUnreadMessage();                    // setTimeout(checkLoaded(),0);                };            };            $scope.$watch('user.profile',function (newValue,oldValue) {                if(newValue){                    $scope.user.profile = newValue;                    $scope.pageLimit = newValue.page_size;                    $rootScope.timezoneOffset = newValue.time_zone || 0;                    // timeService.getUserTimeOffset();                }            });            // 登录时更新我的账户信息            function resetMe() {                accountService.getMe(function (data) {                    httpService.setMyAccount(data);                });                // getMe();            }            // 获取未读消息            function getUnreadMessage() {                var header = {                    limit: 5                };                messageService.getUnread(header,function (data,status,headers) {                    $scope.unMessage = data;                    $scope.unMessageLength = headers("x-result-count");                });            }            //注销登录            $scope.logout = function() {                authService.logout();            };            //智能匹配            $scope.smartSearch = function() {                var searchType = $scope.searchType;                var searchTypeIndex = $scope.searchTypeIndex;                var _sType = searchType[searchTypeIndex ? 1 : 0];                var _searchInfo = searchForm["nsearch" + _sType].value;                if(_searchInfo !== undefined && _searchInfo !== null){                    $scope.searchOutDevice = null;                    var headers = {                        limit: 10,                    };                    if(_sType === "uuid"){                        _searchInfo = {uuid: _searchInfo};                        searchService.deviceByUUID(headers,_searchInfo,searchCallback);                    }else{                        searchService.deviceByMark(headers,_searchInfo,searchCallback);                    }                    function searchCallback(data) {                        $scope.searchOutDevice = data;                    }                };            };            //默认搜索            $scope.doSearch = function(id) {                var searchType = $scope.searchType;                var typeIndex = $scope.searchTypeIndex ? 1 : 0;                var type = searchType[typeIndex];                var formType = "nsearch" + type;                var info = searchForm[formType].value;                $scope.searchInfo = null;                $scope.searchOutDevice = null;                searchForm[formType].value = "";                if(id){                    $state.go('device_gps',{id: id});                }else{                    if(info){                        $state.go('search.device',{info: info,type: type});                    }else{                        httpService.myAlert('info',$filter("chFilter")("empty_search_info"));                    }                }            };            // 高级搜索            $scope.superSearch = function(){                var params = {                    template:  '/discovery/smart.tpl.html',                    controller: "superSearch.ctrl"                };                var resolve = {};                modalService.modal(params,resolve,$scope);            };            // 切换搜索类型            $scope.turnType = function () {                var type = !$scope.searchTypeIndex;                setTimeout(function () {                    $scope.searchTypeIndex = type;                    $scope.searchOutDevice = null;                    $scope.$apply();                },0);            };            // 查看全部通知            $scope.goMessage = function () {                $state.go('user_info');            };            // 跳转到消息目的            $scope.check = function (index) {                var mesg = $scope.unMessage[index];                var type = mesg.type;                var ID = mesg.target;                // var mark = mesg.target_str;                // getUnreadMessage();                if(type === 2){                    $state.go('device_gps', { id: ID });                }else if(type === 1){                    $state.go('user_info');                };            };            // $scope.message = new Array();            // websocket.onopen = function(evt) {            //     console.log("CONNECTED");            //     // var user = $scope.user;            //     // var send = {            //     //     "dst": user.id,//id            //     //     // "type": 1,            //     //     // "level": 1,            //     //     "msg": "test ws " + user.username,            //     // };            //     // send = JSON.stringify(send);            //     // console.log("SENT: " + send);            //     // websocket.send(send);            // };            // websocket.onclose = function(evt) {            //     console.log("DISCONNECTED");            // };            // websocket.onmessage = function(evt) {            //     // console.log('RESPONSE: ' + evt.data);            //     var mesg = JSON.parse(evt.data);            //     setTimeout(function () {            //         $scope.unMessage.push(mesg);            //         $scope.unMessageLength++;            //         $scope.message.push(mesg);            //         $scope.$apply();            //     },0);            //     // websocket.close();关闭            // };            // websocket.onerror = function(evt) {            //     console.log('ERROR:' + evt.data);            // };            $scope.$watch('searchInfo', function (newVal, oldVal) {                if(newVal && !newVal.mark){                    $scope.searchOutDevice = null;                }            });            $rootScope.$on('restMyAccount',function (event,args) {                resetMe();            });            $rootScope.$on('resetNewMessage',function (event,args) {                getUnreadMessage();            });            $scope.setPagesize = function (limit) {                $scope.setProfile.pagesize = limit;            }            $scope.setLanguage = function (lang) {                $scope.setProfile.language = lang;            }            $scope.setTimeZone = function (zone) {                $scope.setProfile.time_zone = zone;            }        }    ])    // 默认 modal.ctrl    .controller('loading.ctrl',[        '$scope',        function ($scope) {            $scope.loadPic = '/images/icon/icon-loading6668.png';            $scope.loadYellowPic = "/images/icon/icon-loading-yellow6668.png";        }    ])    // header    .controller('head.ctrl', [        '$scope','accountService','httpService',        function($scope,accountService,httpService) {            $scope.brandLogoPic = '/images/default/logo-druid6052.png';            $scope.userHeadPic = '/images/default/userhead-grey4848.png';            $scope.editPic = '/images/icon/icon-editor2424.png';            $scope.messagePic = '/images/icon/icon-message3641.png';            $scope.druidHomePage = httpService.getHome();            $scope.updateProfile = function (dirty,valid) {                if(dirty){                    if(!valid){                        return false;                    }else{                        var data = $scope.setProfile;                        accountService.updateProfile(data,function (data) {                            // console.log('profile updated');                            location.reload();                        });                    }                }                return true;            }        }    ])    //导航    .controller('nav.ctrl', [        '$scope','httpService','$state','$timeout','$rootScope',        function($scope,httpService,$state,$timeout,$rootScope) {            $scope.angle = 'fa-angle-down';            // $scope.language = ['en','zh-cn'];            // var curState = $state.current.name;            // if(curState === "device_list"){            //     $scope.navs.activePanel = "panel0";            // }else if((curState === "gps") || (curState === "behavior")){            //     $scope.navs.activePanel = "panel1";            // }else if(curState === "device_set"){            //     $scope.navs.activePanel = "panel2";            // }else if((curState === "user_info") || (curState === "user_auth")){            //     $scope.navs.activePanel = "panel3";            // };            $scope.isActive = function (nav) {                var navs = $scope.navs;                var currentState = $state.current.name;                var isActive = false;                angular.forEach(navs, function (value) {                    if(nav === value.title){                        if(value.subNav.length > 0){                            angular.forEach(value.subNav, function (val) {                                var parent = currentState.split(".")[0];                                var isChild = (val.title.indexOf(parent) === 0);                                if(val === currentState || isChild){                                    isActive = true;                                }                            })                        }else{                            if(value.title === currentState){                                isActive = true;                            }                        }                    }                })                return isActive;            }            // getNav();            function getNav() {                $timeout(function () {                    $scope.navs = httpService.getNav($rootScope.accountLogin.role);console.log($scope.navs);                },1000);            }        }    ])    //通知    .controller('message.ctrl', [        '$scope', '$state', 'messageService', 'httpService', 'timeService','$filter','$timeout','modalService',        function($scope, $state, messageService, httpService, timeService, $filter,$timeout,modalService) {            init();            function init() {                $scope.localTimeZoneOffset = timeService.getLocalTimeOffset();            };            // 跳转到消息目的            $scope.check = function (index) {                var mesg = $scope.message[index];                var type = mesg.type;                var ID = mesg.target;                // var mark = mesg.target_str;                $scope.setReaded(index);                if(type === 2){                    $state.go('device_gps', { id: ID });                }else if(type === 1){                    $state.go('user_info');                };            };            // 标记已读            $scope.setReaded = function (index) {                var IDArray;                var _mesg = $scope.message[index];                var id = _mesg && _mesg.id;                if(id && (!_mesg.readed_at)){                    IDArray = [id];                }else if(!index){                    IDArray = getCheckedID("unread");                }                if(IDArray && IDArray.length > 0){                    messageService.setRead(IDArray,function (data) {                        $scope.chooseAll = false;                        $scope.$emit('resetNewMessage');                        $scope.message[index].readed_at = new Date();                        // $scope.goPage($scope.currentPage);                    });                }            }            // 批量删除消息            $scope.deleteMesg = function () {                var IDArray = getCheckedID();                if(IDArray.length > 0){                    messageService.deleteByIDArray(IDArray,function (data) {                        $scope.chooseAll = false;                        $scope.$emit('resetNewMessage');                        $scope.goPage($scope.currentPage);                    });                }            }            // 获取已选项id            function getCheckedID(unread) {                var messages = $scope.message;                var IDArray = [];                angular.forEach(messages,function (value,index) {                    if(value.checked){                        if(unread){                            !value.readed_at && IDArray.push(value.id);                        }else{                            IDArray.push(value.id);                        }                    }                });                return IDArray;            }            // 全选／全不选            $scope.chooseAllMesg = function () {                var chooseAll = $scope.chooseAll;                var messages = $scope.message;                modalService.showLoading();                angular.forEach(messages,function (value,index) {                    value.checked = chooseAll;                });                $timeout(function () {                    $scope.message = messages;                    modalService.hideLoading();                },0);            }            /**             * 分页-new-2012-12.03             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.pageLimit = newValue;                $scope.goPage(1);            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var header = {                        limit: _limit,                        offset: _offset                    };                    messageService.getAll(header,function (data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        $scope.message = data;                        $scope.dataLength = _dataLength;                        $scope.totalPage = Math.ceil(_dataLength / _limit);                        $scope.currentPage = p;                    });                }            };            function setSearchNote(type,info,length) {                var _searchTips = {type:type, data: info, length: length};                $scope.searchTips = $filter('chFilter')(_searchTips,"searchTips");            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */        }    ])    //用户登录    .controller('login.ctrl', [        '$scope', '$state','$localStorage', '$sessionStorage', 'httpService', 'authService', 'modalService', 'clearService','$rootScope','accountService','timeService',        function($scope, $state, $localStorage, $sessionStorage, httpService, authService, modalService, clearService,$rootScope,accountService,timeService) {            $scope.loaded = true;            $scope.druidHomePage = window.location.origin;            $scope.findPwdPic = '/images/icon/icon-hands8356.png';            $scope.brandLogo = '/images/default/logo-druid6052.png';            $scope.userHead = '/images/default/userhead-light_grey8888.png';            $scope.iconName = '/images/icon/icon-user2424.png';            $scope.iconPass = '/images/icon/icon-password257.png';            $scope.remPass = true;            clearService.clear();            if(authService.getAuth()) {                $state.go('home');            };            $scope.login = function() {                var uname = $scope.username;                var upassword = $scope.password;                if (uname !== "" && upassword !== "") {                    var _putData = {                        "username": uname,                        "password": authService.getPass(uname, upassword)                    };                    accountService.login(_putData,function (data,status,headers) {                        // $rootScope.accountLogin = data;                        // timeService.setProfileTimezone(data.profile && data.profile.time_zone);                        // $rootScope.$emit('initUserProfile',data && data.profile);                        // $rootScope.navs = httpService.getNav(data.role);                        accountService.initMyAccount(data);                        var storageName = authService.getStorageName();                        if ($scope.remPass) {                            $localStorage[storageName] = headers('X-Druid-Authentication');                        } else {                            $sessionStorage[storageName] = headers('X-Druid-Authentication');                        };                        // httpService.setMyAccount(resData);                        // $rootScope.$emit('restMyAccount','reset account');                        $state.go('home');                    });                }            };            $scope.findPassword = function () {                var modalParam = {                    template: '/discovery/find_password.tpl.html',                    controller: "login.ctrl"                };                var resolve = {};                var modal = modalService.modal(modalParam,resolve,$scope);                modal.$promise.then(modal.show);            };        }    ])    // 用户信息    .controller('userInfo.ctrl', [        '$scope', 'httpService', '$modal', 'modalService', '$rootScope','$filter','accountService',        function($scope, httpService, $modal, modalService, $rootScope,$filter,accountService) {            // var user = $scope.user = {            //     "id": '',            //     "username": '',            //     "email": '',            //     "phone": '',            //     "address": '',            //     "role": '',            //     "company_name": '',            //     "creator_id": ''            // };            init();            function init() {                $scope.companyUser = [];                $scope.userHead = "/images/default/userhead-grey8889.png";                $scope.CompanyUserHead = "/images/default/userhead-grey3838.png";                // getCompanyUser();            }            // 获取公司成员信息            function getCompanyUser() {                accountService.listCompanyAccount(function (data) {                    $scope.companyUser = data;                });            };            // 删除用户            $scope.deleteUser = function(user) {                var curUserName = user.username;                $scope.toDeleteUser = user;                var sureText = $filter('chFilter')('delete_user_sure','data-inside',curUserName);//"确定要删除用户 "+ curUserName + " ?"                //  确认删除用户 modal                var resolve = {                    // title: '删除确认',                    content: sureText,                    event: 'delete'                };                modalService.confirm(resolve,$scope);            };            $scope.confirmSure = function (act) {                if(act === 'delete'){                    var user = $scope.toDeleteUser;                    accountService.deleteAccount(user.id,function (data) {                        httpService.myAlert("success", $filter('chFilter')('deleted_user','data-inside',user.username));//"成功删除用户"+ myData.username +"!"                        $rootScope.$emit('companyUserRefresh',"refresh my account info");                    });                }            }            // 修改我的信息-modal            $scope.modifyInfo = function () {                var param = {                    template: '/user/usereditme.tpl.html',                    controller: "userEditMe.ctrl"                };                modalService.modal(param,{},$scope);            };            // 修改我的密码-modal            $scope.modifyMyPassword = function () {                var param = {                    template: '/user/password.tpl.html',                    controller: "password.ctrl"                };                modalService.modal(param,{},$scope);            };            // 点击获取当前用户信息，并加载 modal            $scope.getUserInfo = function(index) {                if($rootScope.accountLogin.role === 'admin'){                    $modal({                        templateUrl: '/user/useredit.tpl.html',                        controller: "userEdit.ctrl",                        resolve: {                            user: function() { return $scope.companyUser[index] }                        },                        onHide:function () {                          getCompanyUser();                        },                        backdrop: false,                        show: true                    });                }            };            $scope.addUser = function () {                if($rootScope.accountLogin.role === 'admin'){                    var param = {                        template: '/user/useradd.tpl.html',                        controller: "userAdd.ctrl"                    };                    modalService.modal(param,{},$scope);                }            };            $rootScope.$on("companyUserRefresh", function (event,args) {                getCompanyUser();            });        }    ])    // 用户信息    .controller('companyUser.ctrl', [        '$scope', 'httpService', '$modal', 'modalService', '$rootScope','$filter','accountService','$window','$timeout','$state',        function($scope, httpService, $modal, modalService, $rootScope,$filter,accountService,$window,$timeout,$state) {            init();            function init() {                $scope.companyUser = [];                $scope.CompanyUserHead = "/images/default/userhead-grey3838.png";                $scope.gridCompanyUser = {                    enablePaginationControls: false,                    enableRowSelection: false,                    enableCellEdit: false,                    enableColumnMenus: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: false,                    modifierKeysToMultiSelect: false,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    columnDefs: httpService.getColumnDefs("company_user"),                    onRegisterApi: function(gridApi) {                        $scope.gridApi = gridApi;                    }                };            }            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },0);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            // 获取公司成员信息            function getCompanyUser() {                var headers = {                    limit: 0,                    offset: 0                };                accountService.listCompanyAccount(headers,function (data) {                    $scope.companyUser = data;                    $scope.gridCompanyUser.data = data;                });            };            // 删除用户            $scope.deleteUser = function(user) {                $scope.toDeleteUser = user;                var curUserName = user.username;                var sureText = $filter('chFilter')('delete_user_sure','data-inside',curUserName);//"确定要删除用户 "+ curUserName + " ?"                var resolve = {                    // title: '删除确认',                    content: sureText,                    event: 'delete'                };                modalService.confirm(resolve,$scope);            };            $scope.confirmSure = function (act) {                if(act === 'delete'){                    var user = $scope.toDeleteUser;                    accountService.deleteAccount(user.id,function (data) {                        httpService.myAlert("success", $filter('chFilter')('deleted_user','data-inside',user.username));//"成功删除用户"+ myData.username +"!"                        $rootScope.$emit('companyUserRefresh',"refresh my account info");                    });                }            }            // 点击获取当前用户信息，并加载 modal            $scope.getUserInfo = function(user) {                if($rootScope.accountLogin.role === 'admin'){                    $modal({                        templateUrl: '/user/useredit.tpl.html',                        controller: "userEdit.ctrl",                        resolve: {                            user: function() { return user }                        },                        onHide:function () {                            // getCompanyUser();                        },                        backdrop: false,                        show: true                    });                }            };            $scope.addUser = function () {                if($rootScope.accountLogin.role === 'admin'){                    var param = {                        template: '/user/useradd.tpl.html',                        controller: "userAdd.ctrl"                    };                    modalService.modal(param,{},$scope);                }            };            // 获取单个用户设备授权信息            $scope.getUserDeviceAuth = function (user) {                setTimeout(function () {                    // $scope.userDeviceAuth = $scope.deviceAuth[index];                    // $scope.$apply();                    // console.log($scope.deviceAuth[index])                    $state.go('user_auth.user',{id: user.id});                },0);            };            $rootScope.$on("companyUserRefresh", function (event,args) {                getCompanyUser();            });            /**             * 分页-new-2012-12.03             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridCompanyUser.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var headers = {                        limit: _limit,                        offset: _offset                    };                    accountService.listCompanyAccount(headers,function (data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        $scope.dataLength = _dataLength;                        $scope.totalPage = Math.ceil(_dataLength / _limit);                        $scope.currentPage = p;                        $scope.gridCompanyUser.data = [];                        angular.forEach(data,function (value,index) {                            var tmp = value;                            if(tmp.role !== 'admin'){                                tmp.auth_device_count = tmp.auth_devices ? tmp.auth_devices.length : 0;                                tmp.setting_set = 0;                                tmp.biological_view = 0;                                angular.forEach(tmp.auth_devices,function (val,key) {                                    tmp.setting_set +=(val.setting_set && val.setting_set === 1) ? 1 : 0;                                    tmp.biological_view += (val.biological_view && val.biological_view === 1) ? 1 : 0;                                });                                $scope.gridCompanyUser.data.push(tmp);                            };                        });                    });                }            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */        }    ])    // 添加用户    .controller('userAdd.ctrl', [        '$scope','$filter', 'httpService', 'authService', '$modal', '$state', 'formService', '$rootScope','accountService',        function($scope, $filter, httpService, authService, $modal, $state, formService, $rootScope,accountService) {            var userRegErrors = formService.getError();            init();            function init() {                $scope.userLimit = formService.getUserLimit();                $scope.pattern = formService.getUserPattern();                $scope.curUserhead = "/images/default/userhead-light_grey8888.png";                $scope.regName = userRegErrors.username;                $scope.regEmail = userRegErrors.email;                $scope.regPhone = userRegErrors.phone;                $scope.regAddress = userRegErrors.address;                $scope.regPassword = userRegErrors.password;                $scope.regRepassword = userRegErrors.Repassword;            };            // 执行创建用户            $scope.save = function() {                var check = $scope.checkValid(); //判断是否完成表单验证操作                if(check){                    // 保存当前编辑数据                    addUser(); //完成表单验证操作后执行方法                    // $state.go("user_info",{},{reload:true});                    return true;                };            };            // 检查合法            $scope.checkValid = function () {                var check = $scope.addUserForm.$valid; //判断是否完成表单验证操作                var pass = $scope.regPassword.name;                var rePass = $scope.regRepassword.name;                if ((check === true) && (pass === rePass)) {                    return true;                } else{                    var input = ["Name","Email","Phone","Address","Password","Repassword"];                    for(var i=0;i<input.length;i++){                        if((i === input.length-1) && pass !== rePass){                            $scope.regTip = $filter("chFilter")("password_not_match");                        }else if($scope["reg"+input[i]].regVal !== "pass"){                            var regInput = $scope["reg"+input[i]];                            var tipName = regInput.regVal;                            for(var j=0;j<regInput.regList.length;j++){                                if(tipName === regInput.regList[j].name){                                    $scope.regTip = regInput.regList[j].tips;                                    break;                                };                            };                            break;                        };                    };                    angular.element('.alert').remove();                    httpService.myAlert("danger",$scope.regTip,null,"#myModal");                    return false;                };            };            // 获得 input reg状态            $scope.change = function(reg, err) {                for (var attr in err) {                    if (err[attr] === true) {                        $scope[reg].regVal = attr;                        return;                    };                };                $scope[reg].regVal = "pass";            };            // 创建用户            function addUser() {                var uname = $scope.regName.name;                var upassword = $scope.regRepassword.name;                var pass = authService.getPass(uname, upassword);                var _putData = {                    "username": $scope.regName.name,                    "email": $scope.regEmail.name,                    "phone": $scope.regPhone.name,                    "address": $scope.regAddress.name,                    "password": pass,                    "role": "user"                };                accountService.createAccount(_putData,function (data) {                    //执行成功                    httpService.myAlert("success",$filter('chFilter')('account_created'));                    $rootScope.$emit('companyUserRefresh',"refresh my account info");                });            };        }    ])    // 修改用户资料    .controller('userEditMe.ctrl',[        '$scope','$filter', 'httpService', 'formService', '$state', '$rootScope','accountService',        function ($scope,$filter, httpService, formService, $state, $rootScope,accountService) {            $scope.pattern = formService.getUserPattern();            var userRegErrors = formService.getError();            init();            function init() {                $scope.userLimit = formService.getUserLimit();                $scope.regName = userRegErrors.username;                $scope.regEmail = userRegErrors.email;                $scope.regPhone = userRegErrors.phone;                $scope.regAddress = userRegErrors.address;                getMe();            };            function getMe() {                accountService.getMe(function (data) {                    $scope.accountMe = data;                });            }            // 检查合法            $scope.checkValid = function () {                var check = $scope.myInfoForm.$valid; //判断是否完成表单验证操作                if (check === true) {                    return true;                } else{                    var input = ["Email","Phone","Address"];                    for(var i=0;i<input.length;i++){                        if($scope["reg"+input[i]].regVal !== "pass"){                            var regInput = $scope["reg"+input[i]];                            var tipName = regInput.regVal;                            for(var j=0;j<regInput.regList.length;j++){                                if(tipName === regInput.regList[j].name){                                    $scope.regTip = regInput.regList[j].tips;                                    break;                                };                            };                            break;                        };                    };                    angular.element('.alert').remove();                    httpService.myAlert("danger",$scope.regTip,null,"#myModal");                    return false;                };            };            // 修改用户信息            $scope.save = function () {                var user = $scope.accountMe;                var _putData = {                    'email': user.email,                    'phone': user.phone,                    'address': user.address,                };                var check = $scope.checkValid(); //判断是否完成表单验证操作                if(check){                    accountService.updateMe(_putData,function (data) {                        httpService.setMyAccount(_putData);                        httpService.myAlert("success",$filter('chFilter')('account_info_updated'));                    });                    return true;                }else{                    return false;                };            };            // 获得 input reg状态            $scope.change = function(reg, err) {                for (var attr in err) {                    if (err[attr] === true) {                        $scope[reg].regVal = attr;                        return;                    };                };                $scope[reg].regVal = "pass";            };        }    ])    // 编辑用户    .controller('userEdit.ctrl', [        '$scope','$filter', 'httpService', 'authService', 'modalService', 'user', 'formService','accountService','$rootScope',        function($scope,$filter,  httpService, authService, modalService, user, formService,accountService,$rootScope) {            var userRegErrors = formService.getError();            var curUserId = user.id;            var curUserName = user.username;            init();            function init() {                $scope.userLimit = formService.getUserLimit();                $scope.pattern = formService.getUserPattern();                $scope.user = user;                $scope.allRole = ['user','admin'];                $scope.userhead = "/images/default/userhead-light_grey8888.png";                $scope.regPassword = userRegErrors.password;                $scope.regRepassword = userRegErrors.Repassword;            };            $scope.save = function() {                // 重置用户密码                var check = $scope.checkValid(); //判断是否完成表单验证操作                if(check){                    // 保存当前编辑数据                    var myAccount = httpService.getMyAccount();                    var _curUsername = myAccount.username;                    var old_pass = authService.getPass(_curUsername,$scope.curPassword);                    var pass = authService.getPass(curUserName,$scope.RnewPassword);                    var passdata = {                        "old_password": old_pass,                        "password": pass                    };                    accountService.updateAccountPassword(curUserId,passdata,function (data) {console.log(1);                        httpService.myAlert("success",$filter('chFilter')('password_changed'));                    });                    return true;                }else{                    return false;                };                // var _curUsername = $scope.user.username;                // var old_pass = authService.getPass(_curUsername,$scope.curPassword);                // var pass = authService.getPass(curUserName,$scope.RnewPassword);                // var passdata = {                //     "old_password": old_pass,                //     "password": pass                // };                // if($scope.newPassword === $scope.RnewPassword){                //     httpService.set("put",passUrl, passdata).then(function(response) {                //         httpService.myAlert("success",$filter('chFilter')('password_changed'));                //     }, function(response) {                //         httpService.error(response);                //     });                // }else{                //     httpService.myAlert("danger",$filter('chFilter')('password_not_match'));                // };            };            // 检查合法            $scope.checkValid = function () {                var check = $scope.curInfoForm.$valid && $scope.curPassword; //判断是否完成表单验证操作                var pass = $scope.newPassword;                var rePass = $scope.RnewPassword;                if ((check === true) && (pass === rePass)) {                    return true;                } else{                    if(!$scope.curPassword){                        $scope.regTip = $filter("chFilter")("admin_password_tip");                    }else{                        var input = ["Password","Repassword"];                        for(var i=0;i<input.length;i++){                            if((i === input.length-1) && pass !== rePass){                                $scope.regTip = "两次密码输入不一致,请重新输入!";                            }                            else if($scope["reg"+input[i]].regVal !== "pass"){                                var regInput = $scope["reg"+input[i]];                                var tipName = regInput.regVal;                                for(var j=0;j<regInput.regList.length;j++){                                    if(tipName === regInput.regList[j].name){                                        $scope.regTip = regInput.regList[j].tips;                                        break;                                    };                                };                                break;                            }else{                                return true;                            };                        };                    }                    angular.element('.alert').remove();                    httpService.myAlert("danger",$scope.regTip,null,"#myModal");                    return false;                };            };            // 删除用户            $scope.deleteUser = function() {                var sureText = $filter('chFilter')('delete_user_sure','data-inside',curUserName);//"确定要删除用户 "+ curUserName + " ?"                var resolve = {                    // title: '删除确认',                    content: sureText,                    event: 'delete'                };                modalService.confirm(resolve,$scope);            };            $scope.confirmSure = function (act) {                if(act === 'delete'){                    accountService.deleteAccount(user.id,function (data) {                        httpService.myAlert("success", $filter('chFilter')('deleted_user','data-inside',user.username));//"成功删除用户"+ myData.username +"!"                        $rootScope.$emit('companyUserRefresh',"refresh my account info");                    });                }            }            // 获得 input reg状态            $scope.change = function(reg, err) {                for (var attr in err) {                    if (err[attr] === true) {                        $scope[reg].regVal = attr;                        return;                    };                };                $scope[reg].regVal = "pass";            };        }    ])    // 修改密码    .controller('password.ctrl', [        '$scope','$filter','authService', 'httpService', 'formService','accountService',        function($scope,$filter, authService, httpService, formService,accountService) {            $scope.userHead = "/images/default/userhead-light_grey8888.png";            var userName = "";            $scope.check= false;            $scope.userLimit = formService.getUserLimit();            $scope.pattern = formService.getUserPattern();            // 判断两次密码输入是否一致            var checkSamePassword = function() {                if ($scope.RnewPassword === $scope.newPassword) {                    return true;                }else{                    return false;                };            };            // 获取用户名            $scope.getUname = function() {                var user = httpService.getMyAccount();                userName = user.username;                return userName;            };            // 修改密码            $scope.save = function() {                var uname = userName;                var opass = $scope.myPassword; //原密码                var npass = $scope.RnewPassword; //新密码                var oldpass = authService.getPass(uname, opass);                var newpass = authService.getPass(uname, npass);                if (checkSamePassword()) {                    var _putData = {                        'old_password': oldpass,                        'password': newpass                    };                    accountService.updatePasswordMe(_putData,function (data) {                        httpService.myAlert("success",$filter('chFilter')('password_changed'));                        authService.logout();                    });                } else {                    httpService.myAlert("danger",$filter('chFillter')('password_not_match'));                }            };        }    ])    // 设备授权    .controller('deviceAuth.ctrl', [        '$scope', 'httpService', '$state','accountService',        function ($scope, httpService, $state,accountService) {        var setting_set = $scope.setting_set = [];        var biological_view = $scope.biological_view = [];            getDeviceAuth();            // 获得设备授权列表            function getDeviceAuth() {                var header = {};                accountService.listCompanyAccount(header,function (data) {                    var tmpData = [];                    $scope.dataLength = data.length;                    angular.forEach(data,function (value,index) {                        if(value.role !== 'admin'){                            tmpData.push(value);                        }else{                            $scope.dataLength --;                        };                    });                    var authDevice = $scope.deviceAuth = tmpData;                    for(var i = 0;i<authDevice.length;i++){                        setting_set[i] = 0;                        biological_view[i] = 0;                        angular.forEach(authDevice[i].auth_devices,function (value,key) {                            setting_set[i] +=(value.setting_set && value.setting_set === 1) ? 1 : 0;                            biological_view[i] += (value.biological_view && value.biological_view === 1) ? 1 : 0;                        });                    };                });            };            // 获取单个用户设备授权信息            $scope.getUserDeviceAuth = function (index) {                setTimeout(function () {                    // $scope.userDeviceAuth = $scope.deviceAuth[index];                    // $scope.$apply();                    // console.log($scope.deviceAuth[index])                    var tmp = $scope.deviceAuth[index];                    $state.go('user_auth.user',{id: tmp.id});                },0);            };        }//    ])    // 用户设备授权    .controller('deviceAuthUser.ctrl', [        '$scope','$rootScope','$filter', 'httpService', '$state','$stateParams','accountService','deviceService','$window','$timeout',        function ($scope,$rootScope,$filter, httpService, $state, $stateParams,accountService,deviceService,$window,$timeout) {            var curID = $stateParams.id;//gridUserAuth            init();            // 初始化            function init() {                $scope.toAddDevice = [];                //permissions：0禁止，1查看，2编辑，3查看与编辑                $scope.userAuth = {                    "setting_auth": {view: false,edit:false},                    "export_auth": false,                    "user_auth": {view: false,edit:false},                    "biological_auth": {view: false,edit:false},                    "env_auth": false,                    "bhv_auth": false,                    "analysis_auth": false,                };                $scope.tabs = [                    {                        title: 'user-device',                        display: '',                        name: 'userAuthDevice',                    },                    {                        title: 'add-device',                        display: $filter('chFilter')('add_devices'),                        name: 'noAuthDevice',                    },                ];                $scope.tabs.activeTab = 'user-device';                getUserAuth(curID);            };            $scope.updateUserAuth = function () {                var userAuth = angular.copy($scope.userAuth);                angular.forEach(userAuth,function (value,key) {                    if(!value){                        userAuth[key] = 0;                    }else{                        if(typeof(value) === 'boolean'){                            userAuth[key] = value ? 1 : 0;                        }else{                            if(value.edit && value.view){                                userAuth[key] = 3;                            }else if(!value.view && value.edit){                                userAuth[key] = 2;                            }else  if(value.view && !value.edit){                                userAuth[key] = 1;                            }else{                                userAuth[key] = 0                            }                        }                    }                });                accountService.updateUserAuth(curID,userAuth,function (data) {                    // console.log('success',data);                });            }            // 获取用户授权信息            function getUserAuth(id) {                accountService.getAccountByID(id,function (data) {                    var tmpAuth = data.device_id || [];//auth_devices                    $scope.tabs[0].display = $filter('chFilter')('account') + "&nbsp;" + data.username + "&nbsp;&nbsp;&nbsp;&nbsp;" + $filter('chFilter')('device_count') + ":&nbsp;" + tmpAuth.length;                    $scope.username = data.username;                    $scope.authDevices = tmpAuth;                    var permissions = data.permissions;                    if(permissions){                        angular.forEach(permissions,function (value,key) {                            if(key !== 'user_auth' && key !== 'biological_auth' && key !== 'setting_auth'){                                $scope.userAuth[key] = value > 0;                            }else{                                var tmp = {                                    edit: false,                                    view: false                                };                                if(value === 3){                                    tmp.edit = true;                                    tmp.view = true;                                }else if(value === 2){                                    tmp.edit = true;                                }else if(value === 1){                                    tmp.view = true;                                }                                $scope.userAuth[key] = tmp;                            }                        });                    }                    getDeviceInfo(tmpAuth);                });            }            // 获得设备信息,用户授权设备信息            function getDeviceInfo(auth) {                if(auth && auth.length > 0){                    var postData = {                        id: auth                    };                    // angular.forEach(auth,function (value,key) {                    //     postData.id.push(value.device_id);                    // });                    var header = {                        // limit: _limit,                        // offset: _offset                    };                    deviceService.getDeviceByIDs(header,postData,function (data,status,headers) {                        $scope.userDevice = data;                    });                }            };            // 修改授权信息            $scope.save = function (device_auth) {console.log(device_auth);                var auth = {                    device_id: device_auth.id,                    biological_view: device_auth.biological_view ? 1 : 0,                    setting_set: device_auth.setting_set ? 1 : 0                };                accountService.editUserAuthDevice(curID,auth,function (data) {                    httpService.myAlert('success',$filter('chFilter')('change_success'));                });            };            // 跳转到增加设备授权            $scope.addAuthDevice = function () {                $state.go("user_auth.user.add");            };            // 删除设备授权            $scope.delete = function (device_auth) {                var putData = {                    id: []                };                putData.id.push(device_auth.id);                // updateDeviceAuth(_data);                accountService.removeUserAuthDevice(curID,putData,function (data) {                    httpService.myAlert('success',$filter('chFilter')('change_success'));                    angular.forEach($scope.authDevices,function (value,index) {                       if(value.device_id === device_auth.id) {                           $scope.authDevices.splice(index,1);                       }                    });                    $scope.goPage($scope.currentPage);                    // angular.forEach($scope.gridUserAuth.data,function (value,index) {                    //     if(value.id === device_auth.id) {                    //         $scope.gridUserAuth.data.splice(index,1);                    //     }                    // });                });            };            $scope.removeDevice = function (device) {                var putData = {                    id: [device.id]                };                accountService.removeUserAuthDevice(curID,putData,function (data) {                    // httpService.myAlert('success',$filter('chFilter')('change_success'));                    console.log('success');                    angular.forEach($scope.userDevice,function (value,index) {                        if(value.id === device.id){                            $scope.userDevice.splice(index,1);                        }                    })                });            }            function getIdleDevice() {                var postData = {                    id: []                };                angular.forEach($scope.userDevice,function (value,key) {                    postData.id.push(value.id);                });                deviceService.getDeviceNotAuth({},postData,function (data) {                    $scope.idleDevice = data;                });            }            $scope.setCurMode = function (mode) {                console.log(mode);                if(mode === 'add-device'){                    getIdleDevice();                }else if(mode === 'user-device'){                }            }            $scope.selectDevice = function (device) {                var toAdd = $scope.toAddDevice;                console.log(toAdd,toAdd.indexOf(device.id));                if(toAdd.indexOf(device.id) < 0){                    $scope.toAddDevice.push(device.id);                }else{                    angular.forEach(toAdd,function (value,index) {                        if(value === device.id){                            $scope.toAddDevice.splice(index,1);                        }                    })                }            }            $scope.addDeviceToUser = function () {                var putData = { id: $scope.toAddDevice };                accountService.addUserAuthDevice(curID,putData,function (data) {                   console.log('success');                    getUserAuth(curID);                    $scope.tabs.activeTab = 'user-device';                    $scope.toAddDevice = [];                });            };            $rootScope.$on('refreshUserAuthDevice',function (event, args) {                init();            });        }    ])    // 添加用户设备授权    .controller('addDeviceAuthToUser.ctrl', [        '$scope','$filter','$rootScope', 'httpService', '$state','$stateParams','accountService','deviceService','$timeout','$window',        function ($scope,$filter,$rootScope, httpService, $state, $stateParams,accountService,deviceService,$timeout,$window) {            var curID = $stateParams.id;            init();            // 初始化            function init() {                $scope.selected = [];                $scope.gridAddAuth = {                    enableFiltering: true,                    // useExternalFilter: true,                    enablePaginationControls: false,                    enableRowSelection: true,                    enableCellEdit: false,                    showGridFooter: false,                    enableFullRowSelection: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: true,                    modifierKeysToMultiSelect: false,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    columnDefs: httpService.getColumnDefs("add_user_auth"),                    onRegisterApi: function(gridApi) {                        $scope.gridApi = gridApi;                        gridApi.selection.on.rowSelectionChanged($scope, function (row) {                            // console.log(row);                        });                    }                };                getUserAuth(curID);//old            };            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-42;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },0);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            // 获取用户授权信息            function getUserAuth(id,p) {                accountService.getAccountByID(id,function (data) {                    var tmpAuth = data.auth_devices;                    $scope.username = data.username;                    $scope.authDevices = tmpAuth;                    getAllDevice(tmpAuth,p);                });            }            function getAllDevice(auth,p) {                var _limit = $scope.pageLimit;                var _offset = $scope.pageLimit * (p - 1);                var headers = {                    limit: _limit,                    offset: _offset                };                var postData = {                    id: []                };                angular.forEach(auth,function (value,key) {                    postData.id.push(value.device_id);                });                $scope.chooseLength = 0;                deviceService.getDeviceNotAuth({},postData,function (data,status,headers) {                    // $scope.allDevice = data;//old                    var _dataLength = headers("X-Result-Count");                    $scope.dataLength = _dataLength;                    $scope.totalPage = Math.ceil($scope.dataLength / $scope.pageLimit);                    $scope.currentPage = p;                    $scope.gridAddAuth.data = data;                    angular.forEach($scope.gridAddAuth.data, function (value,index) {                        value.sequence = index;                    });                    // angular.forEach($scope.allDevice, function (value,index) {                    //     for(var i=0;i<auth.length;i++){                    //         if(auth[i].device_id === value.id){                    //             var _uDAuth = [];                    //             value.setting_set  = Boolean(auth[i].setting_set === 1);                    //             value.biological_view = Boolean(auth[i].biological_view === 1);                    //             value.choose = true;                    //             $scope.chooseLength ++;                    //         };                    //     };                    // });                });            }            // 更新选中设备数量            $scope.setChoosed = function (type) {                var checked = 0;                angular.forEach(allDeviceForm.choose,function (value,index,array) {                    checked += value.checked ? 1 : 0;                    var _choose = $scope.allDevice[index].choose;                    var _setting_set = $scope.allDevice[index].setting_set;                    var _biological_view = $scope.allDevice[index].biological_view;                    if(type === 'set' && (_setting_set || _biological_view) && !_choose){                        $scope.allDevice[index].choose = true;                    }else if(type === 'choose' && !value.checked){                        $scope.allDevice[index].setting_set = false;                        $scope.allDevice[index].biological_view = false;                    };                });                setTimeout(function () {                    // console.log($scope.allDevice);                    $scope.chooseLength = checked;                    $scope.$apply();                },0);            };            // 跳转到增加设备授权            $scope.addAuthDevice = function () {                $state.go("user_auth.user.add");            };            // 增加设备授权            $scope.addDevice = function () {                var allDevice = $scope.allDevice;                // var _data = {                //     "id": curID,                //     "auth_devices": []                // };                var putData = [];                angular.forEach(allDevice,function (value,index,array) {                    var tmp = {};                    if(value.choose){                        tmp.device_id = value.id;                        value.biological_view ? tmp.biological_view = value.biological_view ? 1 : 0 : null;                        value.setting_set ? tmp.setting_set = value.setting_set ? 1 : 0 : null;                        putData.push(tmp);                    };                });                updateDeviceAuth(curID,putData);            };            // 提交修改            function updateDeviceAuth(userID,putData) {                accountService.addUserAuthDevice(userID,putData,function (data) {                    httpService.myAlert('success',$filter('chFilter')('change_success'));                    // init();                    // $rootScope.$emit('refreshUserAuthDevice');                    history.go(-1);                });            };                        $scope.selectRow = function (row) {                var isSelected = row.entity.choose;                var sequence = row.entity.sequence;                // var rowIndex = row.grid.renderContainers.body.visibleRowCache.indexOf(row);                if(isSelected){                    $scope.gridApi.selection.selectRow($scope.gridAddAuth.data[sequence]);                }else{                    $scope.gridApi.selection.unSelectRow($scope.gridAddAuth.data[sequence]);                }            }            $scope.selectRowItem = function (row) {                var sequence = row.entity.sequence;                // var rowIndex = row.grid.renderContainers.body.visibleRowCache.indexOf(row);                if(row.entity.setting_set || row.entity.biological_view){                    $scope.gridApi.selection.selectRow($scope.gridAddAuth.data[sequence]);                }            }            $scope.filterDevice = function () {                $scope.gridApi.grid.columns[1].filter.term = $scope.searchDevice;                $scope.gridApi.grid.queueGridRefresh();            }            $scope.confirmAddDevice = function () {                var selectedRows = $scope.gridApi.selection.getSelectedRows();                var putData = [];                if(selectedRows.length){                    angular.forEach(selectedRows, function (value,index) {                        putData.push({                            device_id: value.id,                            setting_set: value.setting_set ? 1 : 0,                            biological_view: value.biological_view ? 1 : 0                        });                    });                    updateDeviceAuth(curID,putData);                }else{                    httpService.myAlert(2,$filter('chFilter')('choose_device_auth'));                }            }                        /**             * 分页-new-2012-12.03             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridAddAuth.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var headers = {                        limit: _limit,                        offset: _offset                    };                    if($scope.authDevices){                        getAllDevice($scope.authDevices,p);                    }else{                        getUserAuth(curID,p);                    }                }            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */        }    ])    .controller('companyPay.ctrl', [        '$scope','$filter', 'httpService','accountService','$locale',        function($scope,$filter, httpService,accountService,$locale) {            // $locale.NUMBER_FORMATS.CURRENCY_SYM            init();            function init() {                $scope.billType = [                    {                        name: 'recharge_record',                        value: 0,                    },                    {                        name: 'expense_record',                        value: 1,                    }                ];                // $scope.dateRange = [1,2,3,4,5,6,7,8,9,10,11,12];                $scope.activeType = $scope.billType[1];                $scope.activeMonth = (new Date()).getMonth() + 1;                getCompanyBill();                getCompanyPayList();                getCompanyMonthPay();            }            function getCompanyBill() {                accountService.getCompanyBill(function (data) {                    $scope.companyBill = data;                })            }            function getCompanyPayList() {                var headers = {                    limit: 0,                    offset: 0                };                accountService.getCompanyChargeList(headers,function (data) {                    $scope.companyPayList = data;                })            }            function getCompanyMonthPay() {                // var month = $filter('date')(new Date() + (monthOffset * 2592000000),'yyyy-MM');                var headers = {                    limit: 0,                    offset: 0                };                accountService.getCompanyMonthBill(headers,function (data) {                    $scope.companyMonthBill = data;                    var year,beforeYear;                    angular.forEach(data,function (value,index) {                        year = parseInt(value.Date);                        if(index > 0 && (year < beforeYear)){                            beforeYear = parseInt(data[index-1].Date);                            $scope.companyMonthBill.splice(index-1,0,{                                divisionYear: parseInt(data[index-1].Date)                            });                        }                    });                })            }            $scope.getBillDetail = function (month) {                var headers = {                    month: month,                    // limit: 0,                    // offset: 0                };                accountService.getDeviceDetailBill(headers,function (data) {                    $scope.deviceDetailBill = data;                })            }        }    ])    .controller('monthDevicePay.ctrl', [        '$scope','$filter', 'httpService','accountService','$stateParams',        function($scope,$filter, httpService,accountService,$stateParams) {            // $locale.NUMBER_FORMATS.CURRENCY_SYM            init();            function init() {                $scope.companyMonthPay = 0;                var month = $stateParams.month;                getMonthPay(month);            }            function getMonthPay(month) {                // var month = $filter('date')(new Date() + (monthOffset * 2592000000),'yyyy-MM');                var headers = {                    month: month,                    // limit: 0,                    // offset: 0                };                accountService.getDeviceDetailBill(headers,function (data) {                    $scope.deviceDetailBill = data;                    angular.forEach(data,function (value,index) {                        $scope.companyMonthPay += value.Money;                    })                })            }        }    ])    // 数据总览    .controller('deviceList.ctrl', [        '$scope', 'httpService', '$filter', 'selectService', '$state', "modalService", 'voltageService', 'i18nService', 'langService','$stateParams','$window','$timeout','deviceService','searchService','downloadService',        function($scope, httpService, $filter, selectService, $state, modalService, voltageService, i18nService, langService, $stateParams,$window,$timeout,deviceService,searchService,downloadService) {            //i18nService.setCurrentLang($scope.currentLang);            var searchInfo,searchType;            var state = $scope.state = $state.current.name;            var btnNote = ["export_device_gps","cancel"];//selection_exit            init();            function init() {                if(state === "search.device"){                    searchInfo = $stateParams.info;                    searchType = $stateParams.type;                };                $scope.iconLocPic = "/images/icon/icon-location-white2024.png"; // button在地图中查看-icon                $scope.actText = btnNote[0];                $scope.currentData = {                    id: ''                };                $scope.gridDeviceList = {                    enablePaginationControls: false,                    rowHeight: $scope.rowHeight,                    enableCellEdit: false,                    enableColumnMenus: false,                    // enableCellEditOnFocus: true,                    enableRowSelection: true, //行选择                    enableSelectAll: true,                    enableRowHeaderSelection: false, //只允许选择框选择行                    multiSelect: false, //允许行选择                    // noUnselect: true,//禁止点击取消选择                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    columnDefs: httpService.getColumnDefs("device_list")                };                $scope.location = [];                $scope.gridDeviceList.onRegisterApi = function(gridApi) {                    //set gridApi on scope                    $scope.gridApi = gridApi;                    // 单个文本框编辑提交                    gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue) {                        var _putData;                        // var noNull = false;                        $scope.$apply();                        if(newValue !== undefined && newValue !== oldValue){                            _putData = {};                            _putData[colDef.name] = newValue;                            deviceService.updateDevice(rowEntity.id,_putData,function (data) {                                // $scope.gridDeviceList.data = data; //未返回数据                                httpService.myAlert("success",$filter('chFilter')('change_success'));                            });                        };                    });                };            };            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },0);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            //获取 progress 颜色样式            $scope.getStyle = function(value) {                var _color = voltageService.setColor(value).color;                var bd_color = {                    "border-color": _color                }                return bd_color;            };            // 显示设备详情            $scope.showCurDeviceModal = function(row) {                var resolve = {                    device: row.entity,                };                var modalParam = {                    template: '/discovery/device/device.tpl.html',                    controller: 'deviceSetModal.ctrl'                };                modalService.modal(modalParam,resolve,$scope);            };            // 显示生物信息详情            $scope.showCurBiologicalModal = function(row) {                var _curDevice = row.entity;                var bioType = "bird";                var _data = {device_id: _curDevice.id,mark: _curDevice.mark,uuid: _curDevice.uuid};                var resolve = {                    biological: _data,                    type: bioType                };                deviceService.getDeviceBiologicalInfo(_curDevice.id,function (data) {                    resolve.biological = data;                    showBioModal();                },function (status) {                    if(status === 404){                        showBioModal();                    };                });                function showBioModal() {                    var modalParam = {                        template: '/discovery/biological/biological.tpl.html',                        controller: 'biologicalModal.ctrl'                    };                    modalService.modal(modalParam,resolve,$scope);                }            };            // 跳转到(单个设备) gps 记录页面            $scope.showCurDeviceGps = function(row) {                $state.go('device_gps', { id: row.entity.id });            };            // 显示操作按钮            $scope.showAct = function() {                var _show = !$scope.showActBtn;                $scope.showActBtn = _show;                // $scope.gridDeviceList.enableRowSelection = _show;                $scope.gridDeviceList.multiSelect = _show;                $scope.gridDeviceList.enableSelectAll = _show;                // $scope.enableRowHeaderSelection = true; //只允许选择框选择行                if (!_show) {                    $scope.actSelect(true);                    $scope.actText = btnNote[0];                }else{                    $scope.actText = btnNote[1];                }            };            // 全选/全不选            $scope.actSelect = function(act) {                //点击后,状态改变                if(!act){//全选                    $scope.gridApi.selection.selectAllRows();                } else{//全不选                    $scope.gridApi.selection.clearSelectedRows();                };            };            $scope.chooseDownloadType = function () {                var toDownloadDevice = {// 已选中设备的 id                    id: []                };                // 已选中行                var _selectedRows = $scope.gridApi.selection.getSelectedRows();                if (_selectedRows.length > 0) {                    var param = {                        template: '/discovery/device/download.file.tpl.html',                        controller: "fileDownload.ctrl"                    };                    modalService.modal(param,{},$scope);                } else {                    httpService.myAlert("info",$filter('chFilter')('selected_none'));                };            }            // 在地图中标记            $scope.getMap = function() {                //只获取最新一条 gps 信息                if((state === 'search.device') && searchInfo){                    $state.go('map.gps.search', {info: searchInfo,type: searchType});                }else{                    $state.go('map.gps');                };            };            /**             * 分页-new-2012-12.03             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridDeviceList.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var headers = {                        limit: _limit,                        offset: _offset,                    };                    if(state === 'search.device'){                        if(searchInfo){                            if(searchType === "mark"){                                searchService.deviceByMark(headers,searchInfo,deviceListCallback);                            }else if(searchType === "uuid"){                                var putData = {};                                putData[searchType] = searchInfo;                                searchService.deviceByUUID(headers,putData,deviceListCallback);                            }                        }else{                            history.go(-1);                        };                    }else{                        deviceService.listDevices(headers,deviceListCallback);                    };                    function deviceListCallback(data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        var tmpData = httpService.filterData(data);                        $scope.gridDeviceList.data = tmpData;                        // deviceService.getLocationByLatLng(tmpData).then(function (data) {                        //     $scope.gridDeviceList.data = data;                        // });                        angular.forEach($scope.gridDeviceList.data,function (value,index) {                            var gps = value.last_valid_gps;                            var _params = {                                lat: gps && gps.latitude,                                lng: gps && gps.longitude,                            };                            var auth = httpService.checkDeviceAuth(value.id);                            angular.forEach(auth, function (val,key) {                                $scope.gridDeviceList.data[index][key] = val;                            });                            if(gps && _params.lat !== '-' && _params.lng !== '-'){                                deviceService.getMapLocation(_params,function (data) {                                    // $scope.gridDeviceList.data[index].location = data[0].formatted_address;                                    value.location = data[0].formatted_address;                                },function (status) {                                    // $scope.gridDeviceList.data[index].location = $filter('chFilter')("location_undefined");//"找不到该地址";                                    value.location = $filter('chFilter')("location_undefined");                                });                            }else{                                // $scope.gridDeviceList.data[index].location = "-";                                value.location = "-";                            }                        });                        searchInfo && (state === 'search.device') && setSearchNote(searchType, searchInfo, _dataLength);                        $timeout(function () {                            // console.log($scope.gridDeviceList.data);                            $scope.dataLength = _dataLength;                            $scope.totalPage = Math.ceil(_dataLength / _limit);                            $scope.currentPage = p;                            resizeGrid();                        }, 0);                    }                }            };            // 格式化搜索结果提示信息            function setSearchNote(type,info,length) {                var _searchTips = {type:type, data: info, length: length};                $scope.searchTips = $filter('chFilter')(_searchTips,"searchTips");            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */        }    ])    // 文件下载    .controller('fileDownload.ctrl', [        '$scope',  '$state','httpService','$timeout','downloadService','FileSaver', 'Blob','$filter',        function($scope, $state, httpService,$timeout,downloadService,FileSaver,Blob,$filter) {            init();            function init() {                $scope.downloadFile = {                    multiple: 0,                };                $scope.downloadFileType = ['kml','excel','csv'];//支持下载的文件类型                $scope.downloadWay = [0,1]; //合并文件（单个文件），单个设备（多个文件）            };            $scope.checkFileType = function () {                if($scope.downloadFile.type === 'kml'){                    $scope.downloadFile.multiple = 1;                }            }            $scope.save = function () {                var option = $scope.downloadFile;                var type = option.type;                var params = {};                if(type){                    option.start && (params.begin = $filter('date')(option.start,'yyyy-MM-dd'));                    option.end && (params.end = $filter('date')(option.end,'yyyy-MM-dd'));                    var _selectedRows = $scope.gridApi.selection.getSelectedRows();                    var toDownloadDevice = {                        id: []                    };                    angular.forEach(_selectedRows, function(value, index) {                        toDownloadDevice.id.push(value.id);                    });                    if(option.multiple === 1 && type !== 'kml'){                        // 多个文件                        downloadService.downloadByTypeMultiple(toDownloadDevice,type,params,function (data) {                            var _dData = new Blob([data], { type: 'application/zip;charset=utf-8' });                            FileSaver.saveAs(_dData, type + '.zip');                        });                    }else{                        // 单个文件                        downloadService.downloadByType(toDownloadDevice,type,params,function (data) {                            var _dData = new Blob([data], { type: 'application/zip;charset=utf-8' });                            FileSaver.saveAs(_dData, type + '.zip');                        });                    }                }else{                    httpService.myAlert(1,"请选择要下载的文件类型！");                    return false;                }                return true;            }        }    ])    // 设备与配置    .controller('deviseSet.ctrl', [        '$scope',  '$state', 'i18nService','httpService', 'deviceService','$timeout','$window',        function($scope, $state, i18nService, httpService, deviceService,$timeout,$window) {            //i18nService.setCurrentLang($scope.currentLang);            init();            function init() {                $scope.gridDeviceSet = {                    enablePaginationControls: false,                    enableRowSelection: false,                    enableCellEdit: false,                    enableColumnMenus: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: false,                    modifierKeysToMultiSelect: false,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    columnDefs: httpService.getColumnDefs("device_set"),                    onRegisterApi: function(gridApi) {                        $scope.gridApi = gridApi;                    }                };                resizeGrid();            };            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },0);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            /**             * 分页-new-2012-12.03             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridDeviceSet.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    // var loadModal = $scope.loadModalYellow;                    // loadModal.$promise.then(loadModal.show);                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var header = {                        limit: _limit,                        _offset: _offset                    };                    deviceService.listSetting(header,function (data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        $scope.gridDeviceSet.data = httpService.filterData(data);                        $scope.dataLength = _dataLength;                        $scope.totalPage = Math.ceil(_dataLength / _limit);                        $scope.currentPage = p;                    });                }            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */        }    ])    // gps-behavior模板页    .controller('gps_behavior.ctrl', [        '$scope', '$state', '$filter', 'roundProgressService', '$timeout', '$window',  "voltageService","httpService","$stateParams","$rootScope",'deviceService','modalService',        function($scope, $state,$filter, roundProgressService, $timeout, $window, voltageService, httpService, $stateParams,$rootScope,deviceService,modalService) {            var deviceId = $stateParams.id;            function init() {             // 显示页面顶部快捷菜单（当前选中行）(*默认第一条)                $scope.currentData = {                    "mark": "",                    "id": "",                    "device_id": "",                    "uuid": "",                    "timestamp": "",                    "battery_voltage": "",                    "downloaded_at":"",                    "owner": "",                };                // button在地图中查看-icon                $scope.iconLocPic = "/images/icon/icon-location-white2024.png";                var accountAuth = $rootScope.accountAuth;                // 选项卡菜单                if(!accountAuth.env_auth){                    $scope.tabs = [                        {                            "title": "behavior",                            "showAs": "行为数据",                            "page": "/discovery/class/behavior.tpl.html"                        }                    ];                    $scope.tabs.activeTab = 'behavior';                    $scope.getCurDevice();                    //加载progress                    $scope.checkProgress(deviceId);                    // 显示顶部菜单                    angular.element('.detail-info-panel').fadeIn();                }else if(!accountAuth.bhv_auth){                    $scope.tabs = [                        {                            "title": "gps",                            "showAs": "GPS数据",                            "page": "/discovery/class/gps.tpl.html"                        },                        {                            "title": "sms",                            "showAs": "短信数据",                            "page": "/discovery/class/sms.tpl.html"                        },                    ];                    $scope.tabs.activeTab = 'gps';                }else{                    $scope.tabs = [                        {                            "title": "gps",                            "showAs": "GPS数据",                            "page": "/discovery/class/gps.tpl.html"                        },                        {                            "title": "behavior",                            "showAs": "行为数据",                            "page": "/discovery/class/behavior.tpl.html"                        },                        {                            "title": "sms",                            "showAs": "短信数据",                            "page": "/discovery/class/sms.tpl.html"                        },                    ];                    $scope.tabs.activeTab = 'gps';                }                $scope.$watch('tabs.activeTab',function (newValue, oldValue) {                    $scope.gridPage = "/discovery/class/"+newValue+".tpl.html";                });                // 根据路由选择默认tab                // for (var i = 0; i < $scope.tabs.length; i++) {                //     if ($state.$current.name.indexOf() === $scope.tabs[i].title)                //         $scope.tabs.activeTab = i;                // };                $timeout(resizeGrid,1000);            };            function resizeGrid() {console.log('resize grid');                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },0);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            $rootScope.$on('biologicalRefresh', function(event, data){                // $scope.getCurBiological();                $scope.deviceBiological = data;            });            // device-电压-progress            $scope.checkProgress = function() {                var battery_voltage = parseFloat($scope.currentData.battery_voltage);                var max = 100;                var volPercent = voltageService.setPercent(battery_voltage);//剩余电量百分比                var curVoltage = volPercent * max;//剩余电量值                $scope.current = curVoltage;                $scope.max = max;                $scope.offset = 0;                $scope.curstate = '';                $scope.stroke = 8;                $scope.radius = 55;                $scope.isSemi = false;                $scope.rounded = true;                $scope.responsive = false;                $scope.clockwise = true;                $scope.currentColor = '#45ccce';                $scope.bgColor = '#eaeaea';                $scope.duration = 800;                $scope.currentAnimation = 'easeOutCubic';                $scope.animationDelay = 100;                $scope.getStyle = function() {                    return {                        'width': $scope.radius * 2,                        'font-size': $scope.radius / 3.5 + 'px'                    };                };                $scope.getStyleColor = {};                $scope.getColor = function() {                    //<3.6V: red: #FF556A; （不工作）                    // 3.6V~3.7V: orange: #F4A523;  （不能采样）                    // 3.7V~3.9V: blue: #54C2E9;  （可采样）                    // 3.9V++: green: #94C300;  （正常）                    // var _curVol = parseFloat($scope.current.slice(0, -1));                    var _color = voltageService.setColor(battery_voltage).color;                    var _state = voltageService.setColor(battery_voltage).state;                    $scope.currentColor = _color;                    $scope.getStyleColor = {                        "color": _color                    }                    $scope.curstate = _state;                    return $scope.currentColor;                };                // 显示 progress 时执行的操作                $scope.showPreciseCurrent = function(amount) {                    $timeout(function() {                        //dosomething                    }, 1000);                };            }            // 在地图中标记            $scope.getMap = function(row) {                var deviceMark = $scope.deviceMark;                var id = $scope.currentData.id;                // $state.go('gps-map', { id: id, state: 'single' });                $state.go('map.gps', { id: id});            };            // 获取设备信息            $scope.getCurDevice = function () {                deviceService.getDeviceByID(deviceId,function (data) {                    angular.forEach($scope.currentData, function(value, key) {                        if ((key === "mark") || (key === "id") || (key === "uuid") || key === 'last_gps.battery_voltage' || key === 'owner') {                            $scope.currentData[key] = data[key];                        };                    });                    $scope.biologicalType = data.biological_type;                    $scope.getCurBiological();                    $scope.deviceMark = data.mark;                    var auth = httpService.checkDeviceAuth(data.id);                    angular.forEach(auth, function (value,key) {                        $scope.currentData[key] = value;                    })                });            };            // 获取生物信息            $scope.getCurBiological = function () {                var bioType = $scope.biologicalType;                if(bioType){                    deviceService.getDeviceBiologicalInfo(deviceId,function (data) {                        $scope.deviceBiological = data;                    });                }            };            // 查看设备详情modal            $scope.showDeviceSetting = function() {                var resolve = {                    device: $scope.currentData,                };                var modalParam = {                    template: '/discovery/device/device.tpl.html',                    controller: 'deviceSetModal.ctrl'                };                modalService.modal(modalParam,resolve,$scope);            };            // 查看生物信息详情modal            $scope.showDeviceBiological = function() {                var bioType = $scope.biologicalType;                var _data = {device_id: deviceId};                var resolve = {                    biological: _data,                    type: bioType                };                deviceService.getDeviceBiologicalInfo(deviceId,function (data) {                    resolve.biological = data;                    showBioModal();                },function (status) {                    if(status === 404){                        showBioModal();                    }else if(status !== 403){                        httpService.error(response);                    };                });                function showBioModal() {                    var modalParam = {                        template: '/discovery/biological/biological.tpl.html',                        controller: 'biologicalModal.ctrl'                    };                    modalService.modal(modalParam,resolve,$scope);                }            };            init();        }    ])    // gps    .controller('gps.ctrl', [        '$scope','$state','$timeout','$window','$rootScope',        function($scope, $state,$timeout,$window,$rootScope) {            init();            function init() {                $scope.state = $state.current.name;                $scope.gpsPage = "/discovery/class/gps.tpl.html"; //gridGps page            }            $rootScope.$on('updateSearchGpsTips',function (event, data) {                $scope.searchTips = data;            });        }    ])    // gps-grid    .controller('gpsGrid.ctrl', [        '$scope', '$filter', '$stateParams', '$state', 'i18nService', 'httpService','$rootScope','$window','$timeout','deviceService','searchService',        function($scope, $filter, $stateParams, $state, i18nService, httpService,$rootScope,$window,$timeout,deviceService,searchService) {            //i18nService.setCurrentLang($scope.currentLang); //设置  ui-grid 语言            var deviceId;            var searchInfo;            var state = $scope.state = $state.current.name;            // 初始化 gps 数据所需参数            init();            function init() {                var columnDefs = httpService.getColumnDefs("gps");                $scope.gridGps = {                    enablePaginationControls: false,                    enableRowSelection: true,                    enableColumnMenus: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: false,                    modifierKeysToMultiSelect: false,                    noUnselect: true,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    // enablePinning: false,                    columnDefs: columnDefs                }; //gridGps                if(state === "gps" || state === "search.gps"){                    deviceId = null;                    $scope.gridGps.enableRowSelection = false;                    var _gpsColumDefs = [{                        name: 'mark' || "",                        width: 110,                        type: 'number',                        pinnedLeft: true,                        enableCellEdit: false,                        displayName: $filter('chFilter')('mark')                    },{                        name: 'uuid',                        width: 220,                        pinnedLeft: true,                        displayName: "UUID"                    }];                    for(var i=_gpsColumDefs.length-1;i>=0;i--){                        columnDefs.unshift(_gpsColumDefs[i]);//添加到数组                    };                    if(state === "search.gps"){                        searchInfo = httpService.formatUriData($stateParams);                    }                }                else if(state === "device_gps"){                    deviceId = $stateParams.id;                };                // 事件处理                $scope.gridGps.onRegisterApi = function(gridApi) {                    //set gridApi on scope                    $scope.gridApi = gridApi;                    // 当前焦点行                    gridApi.selection.on.rowSelectionChanged($scope, function(row) {                        if (deviceId !== null) {                            setCurMenu(row.entity); //设置顶部菜单数据                        };                    });                    resizeGrid();                }; //onRegisterApi            };            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },500);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            /**             * 分页-new-2016.12.02             * 跳转到指定页             * 切换到第 N 页重新加载数据             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridGps.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var header = {                        limit: _limit,                        offset: _offset                    };                    if(state === 'search.gps'){                        searchService.gps(header,searchInfo,gpsCallback);                    }else{                        if(deviceId){                            deviceService.getDeviceGps(deviceId,header,gpsCallback);                        }else{                            deviceService.gpsList(header,gpsCallback);                        }                    }                    function gpsCallback(data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        // 搜索                        var searchLog = httpService.getSelectLog(searchInfo);                        var _searchInfo = {data:searchLog,length:_dataLength,type:"gps"};                        searchInfo && (state === 'search.gps') && ($scope.searchTips = $filter('chFilter')(_searchInfo,"searchTips"));                        $rootScope.$emit('updateSearchGpsTips',$scope.searchTips);                        // 设备详情                        if (deviceId !== null) { //传递顶部菜单所需数据                            var _curData = $scope.currentData;                            // 有 gps 记录---取第一条                            setCurMenu(data[0]);                            // 没有生物类型时不加载生物信息                            // $scope.getCurBiological();                        };                        $scope.gridGps.data = httpService.filterData(data);                        $scope.dataLength = _dataLength;                        $scope.totalPage = Math.ceil(_dataLength / _limit);                        $scope.currentPage = p;                    }                }            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */            // 设置顶部菜单            function setCurMenu(curRow) {                !$scope.currentData.mark && $scope.getCurDevice();                if(curRow){                    angular.forEach($scope.currentData, function(value, key, array) {                        if (deviceId !== null) {                            if ((key === "device_id") || (key === "uuid") || (key === "timestamp") || (key === "battery_voltage")) {                                $scope.currentData[key] = curRow[key];                            };                        };                    });                }else{                    $scope.getCurDevice();                };                //加载progress                $scope.checkProgress(deviceId);                // 显示顶部菜单                angular.element('.detail-info-panel').fadeIn();            };        }    ])    // behavior    .controller('behavior.ctrl', [        '$scope','$state','$timeout','$window',        function($scope,$state,$timeout,$window) {            init();            function init() {                $scope.state = $state.current.name;                $scope.behaviorPage = "/discovery/class/behavior.tpl.html";                resizeGrid();            }            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },0);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });        }    ])    // behavior-grid    .controller('behaviorGrid.ctrl', [        '$scope', '$filter', '$stateParams', '$state', 'i18nService','httpService','deviceService',        function($scope, $filter, $stateParams, $state, i18nService, httpService,deviceService) {            //i18nService.setCurrentLang($scope.currentLang);            var deviceId = $stateParams.id;            var state = $scope.state = $state.current.name;            var columnDefs = httpService.getColumnDefs("behavior");            init();            function init() {                $scope.gridBehavior = {                    enablePaginationControls: false,                    enableRowSelection: false,                    enableColumnMenus: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: false,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    columnDefs: columnDefs                };                if (state === "device_gps") {                    deviceId = $stateParams.id;                }else if(state === "behavior"){                    var _behaviorColumDefs = [{                        name: 'mark' || "",                        width: 110,                        type: 'number',                        pinnedLeft: true,                        enableCellEdit: false,                        displayName: $filter('chFilter')('mark')                    },                        {                        name: 'uuid',                        width: 220,                        pinnedLeft: true,                        displayName: "UUID"                    }];                    for(var i=_behaviorColumDefs.length-1;i>=0;i--){                        columnDefs.unshift(_behaviorColumDefs[i]);//添加到数组                    };                };                /**                 * 事件处理                 * onRegisterApi                 */                $scope.gridBehavior.onRegisterApi = function(gridApi) {                    //set gridApi on scope                    $scope.gridApi = gridApi;                };            };            /**             * 分页-old             */            // $scope.paginationPageSize = $scope.gridBehavior.paginationPageSize;            // $scope.paginationPageSizes = $scope.gridBehavior.paginationPageSizes;            // $scope.pageLimit = $scope.gridBehavior.paginationPageSize; //每页加载数据数量            // $scope.totalPage; //总的页数            // $scope.dataLength; //总的条数            // $scope.getPage;//跳转到指定页-（*bug:需二次点击才能正确跳转，暂未启用！）            // var _tmpGrid = new Array(); //缓存获取到的数据            // // 设置表格信息            // function setGrid(limit, page) {            //     var offset = (page === 1) ? (limit * (page - 1)) : (limit * page);            //     var _dataLength;            //     var _gridData = $scope.gridBehavior.data;            //     if (_gridData === undefined || page === 1) {            //         getGrid(limit, offset).then(function(response) {            //             $scope.dataLength = response.headers("X-Result-Count");            //             _tmpGrid = response.data;            //             $scope.gridBehavior.data = _tmpGrid;            //             $scope.totalPage = Math.ceil($scope.dataLength / limit * 2);            //         });            //     } else if (offset < $scope.dataLength) {            //         if(_tmpGrid.length < limit*(page+1)){            //             var _offset = _tmpGrid.length;//已获取到数据长度            //             var _limit = limit*(page+1) - _offset;//获取(page+1)页数据            //             var _gridLength = _gridData.length;            //             var _totalPage = $scope.totalPage;            //             getGrid(_limit, _offset).then(function(response) {            //                 // $scope.dataLength = response.headers("X-Result-Count");            //                 if (_gridLength === _offset && (page <= (_totalPage - 1))) { //仅当数据没有加载过时存入数据            //                     var resData = httpService.filterData(response.data);            //                     angular.forEach(resData, function(data, index, array) {            //                         _tmpGrid.push(data);            //                     });            //                 };            //                 $scope.totalPage = Math.ceil($scope.dataLength / limit);            //                 $scope.gridBehavior.data = _tmpGrid;            //             });            //         };            //     };            // };            /**             * 分页-new-2012-12.03             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridBehavior.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    // $scope.$emit('showLoadingYellow', "loading");                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var header = {                        limit: _limit,                        offset: _offset                    };                    if(deviceId){                        deviceService.getDeviceBehavior(deviceId,header,behCallback);                    }else{                        deviceService.behaviorList(header,behCallback);                    }                    function behCallback(data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        $scope.gridBehavior.data = httpService.filterData(data);                        $scope.dataLength = _dataLength;                        $scope.totalPage = Math.ceil(_dataLength / _limit);                        $scope.currentPage = p;                    }                }            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */        }    ])    // gps-grid    .controller('smsGrid.ctrl', [        '$scope', '$filter', '$stateParams', '$state', 'i18nService', 'httpService','$rootScope','$window','$timeout','deviceService',        function($scope, $filter, $stateParams, $state, i18nService, httpService,$rootScope,$window,$timeout,deviceService) {            //i18nService.setCurrentLang($scope.currentLang); //设置  ui-grid 语言            var deviceId;            var searchInfo;            var state = $scope.state = $state.current.name;            // 初始化 gps 数据所需参数            init();            function init() {                var columnDefs = httpService.getColumnDefs("sms");                $scope.gridSMS = {                    enablePaginationControls: false,                    enableRowSelection: true,                    enableColumnMenus: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: false,                    modifierKeysToMultiSelect: false,                    noUnselect: true,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    // enablePinning: false,                    columnDefs: columnDefs                }; //gridSMS                if(state === "sms" || state === "search.gps"){                    deviceId = null;                    $scope.gridSMS.enableRowSelection = false;                    var _gpsColumDefs = [{                        name: 'mark' || "",                        width: 110,                        type: 'number',                        pinnedLeft: true,                        enableCellEdit: false,                        displayName: $filter('chFilter')('mark')                    },{                        name: 'uuid',                        width: 220,                        pinnedLeft: true,                        displayName: "UUID"                    }];                    for(var i=_gpsColumDefs.length-1;i>=0;i--){                        columnDefs.unshift(_gpsColumDefs[i]);//添加到数组                    };                    if(state === "search.sms"){                        searchInfo = httpService.formatUriData($stateParams);                    }                }                else if(state === "device_gps"){                    deviceId = $stateParams.id;                };                // 事件处理                $scope.gridSMS.onRegisterApi = function(gridApi) {                    //set gridApi on scope                    $scope.gridApi = gridApi;                    // 当前焦点行                    gridApi.selection.on.rowSelectionChanged($scope, function(row) {                        if (deviceId !== null) {                            setCurMenu(row.entity); //设置顶部菜单数据                        };                    });                    resizeGrid();                }; //onRegisterApi            };            function resizeGrid() {                $timeout(function () {                    var isFlexBox = angular.element("#flexBoxBody");                    if(isFlexBox){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        if(bodyHeight){                            $scope.gridHeight = bodyHeight-62;                            // angular.element(document.getElementById('gridFlexBox')).css('height', bodyHeight + 'px');                            // angular.element(document.getElementById('myGrid')).css('height', bodyHeight-62 + 'px');                        }                    }                },500);            }            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            /**             * 分页-new-2016.12.02             * 跳转到指定页             * 切换到第 N 页重新加载数据             */            $scope.$watch('pageLimit',function (newValue,oldValue) {                $scope.gridSMS.paginationPageSize = newValue;            });            //跳转到指定页            $scope.goPage = function(p) {                if (p) {                    // $scope.$emit('showLoadingYellow', "loading");                    var _limit = $scope.pageLimit;                    var _offset = $scope.pageLimit * (p - 1);                    var header = {                        limit: _limit,                        offset: _offset                    };                    deviceService.getDeviceSMS(deviceId,header,function (data,status,headers) {                        var _dataLength = headers("X-Result-Count");                        $scope.gridSMS.data = httpService.filterData(data);                        $scope.dataLength = _dataLength;                        $scope.totalPage = Math.ceil(_dataLength / _limit);                        $scope.currentPage = p;                    });                }            };            // 上一页            $scope.previousPage = function () {                $scope.goPage($scope.currentPage-1);            };            // 下一页            $scope.nextPage = function () {                $scope.goPage($scope.currentPage+1);            };            // 每页显示数量            $scope.setPagesize = function(size){                if (size){                    $scope.pageLimit = size;                    $scope.goPage(1);                };            };            /**             * 分页-new-end             */            // 设置顶部菜单            function setCurMenu(curRow) {                !$scope.currentData.mark && $scope.getCurDevice();                if(curRow){                    angular.forEach($scope.currentData, function(value, key, array) {                        if (deviceId !== null) {                            if ((key === "device_id") || (key === "uuid") || (key === "timestamp") || (key === "battery_voltage")) {                                $scope.currentData[key] = curRow[key];                            };                        };                    });                }else{                    $scope.getCurDevice();                };                //加载progress                $scope.checkProgress(deviceId);                // 显示顶部菜单                angular.element('.detail-info-panel').fadeIn();            };        }    ])    // 设备信息modal    .controller('deviceSetModal.ctrl', [        '$scope', 'httpService', '$filter', 'modalService', 'modalParams', 'selectService','deviceService','$timeout',        function($scope, httpService, $filter, modalService, modalParams, selectService,deviceService,$timeout) {            // console.log(device);            var device = modalParams.device;            var deviceId = device.id;            // if (state === 'gps') {            //     deviceId = device.device_id;            // } else if (state === "device") {            //     deviceId = device.id;            // };console.log(state)            $scope.curDevice = device;            $scope.formPage = "/discovery/device/part_mode_set.html";            // 备份，用于提交数据时使用            $scope.currentDevice = {                "behavior_sampling_freq": "",                "behavior_sampling_mode": "",                "behavior_voltage_threshold": "",                "env_sampling_freq": "",                "env_sampling_mode": "",                "env_voltage_threshold": "",                "gprs_freq": "",                "gprs_mode": "",                "gprs_voltage_threshold": ""            };            // 选项卡菜单            $scope.tabs = [                {                    "title": "realtime",                    "showAs": "实时模式"                },                {                    "title": "standard",                    "showAs": "标准模式"                },                {                    "title": "save",                    "showAs": "省电模式"                },                {                    "title": "standby",                    "showAs": "待机模式"                },                {                    "title": "custom",                    "showAs": "自定义"                }            ];            $scope.selected = {};//选择框-显示值            $scope.select = {};//选择框-所有值            $scope.modeset;//网页显示            //设置不可编辑状态            var seDis = {                realtime: [true, true, true],                standard: [true, true, true],                save: [true, true, true],                standby: [true, true, true],                custom: [false, false, true]            }            initCtrl();            // controller初始化            function initCtrl() {                $scope.tabs.activeTab = 'custom';                getDevice(); // 获取设备信息                getMode(); //获取不同采样模式初始值                setFullSelect(); //设置所有 select 框的值                $scope.modeset = $scope.selected.custom;//默认-自定义模式                $scope.seDis = seDis.custom;            };            // 实时更新到当前模式对应数据            $scope.setCurMode = function (curmode) {                setTimeout(function () {                    $scope.$apply(                        function () {                            $scope.modeset = $scope.selected[curmode];                            $scope.seDis = seDis[curmode];                    });                },0);            };            // 获取采样模式            function getMode() {                //获取电压模式                var selected = selectService.getMode();                var _mode = ["realtime", "standard", "save", "standby", "custom"];                angular.forEach(_mode, function (value,index,array) {                    selected[value] = selectService.getModeDefault(value);                });                $scope.selected = selected;            }; //getMode            // 设置所有 select 框的值            function setFullSelect() {                var _name = ["env", "behavior", "gprs"];                var _key = [                    ["env_sampling_mode", "env_sampling_freq", "env_voltage_threshold"],                    ["behavior_sampling_mode", "behavior_sampling_freq", "behavior_voltage_threshold"],                    ["gprs_mode", "gprs_freq", "gprs_voltage_threshold"]                ];                angular.forEach(_name, function(value, index, array) {                    if (value === "env") {                        $scope.select.env = new Array();                        $scope.select.env = setSelectValue($scope.select.env, _key[index]);                    } else if (value === "behavior") {                        $scope.select.behavior = new Array();                        $scope.select.behavior = setSelectValue($scope.select.behavior, _key[index]);                    } else if (value === "gprs") {                        $scope.select.gprs = new Array();                        $scope.select.gprs = setSelectValue($scope.select.gprs, _key[index]);                    }                });            }; //setFullSelect            // 设置 select 框的选项值            function setSelectValue(data, key) {                data = new Array();                var _type = ["mode", "freq", "threshold"];                angular.forEach(_type, function(value, index, array) {                    if (value === "mode") {                        data.mode = new Array();                        angular.forEach(selectService.getSelect(key[index]), function(value, index, array) {                            var tmp = { "value": value };                            data.mode.push(tmp);                        });                    } else if (value === "freq") {                        data.freq = new Array();                        angular.forEach(selectService.getSelect(key[index]), function(value, index, array) {                            var tmp = { "value": value };                            data.freq.push(tmp);                        });                    } else if (value === "threshold") {                        data.threshold = new Array();                        angular.forEach(selectService.getSelect(key[index]), function(value, index, array) {                            var tmp = { "value": value };                            data.threshold.push(tmp);                        });                    }                });                return data;            }; //setSelectValue            // 获取设备信息            function getDevice() {                deviceService.getDeviceSetting(deviceId,function (data) {                    // 用于提交数据时使用                    angular.forEach($scope.currentDevice, function(value, key, array) {                        $scope.currentDevice[key] = data[key];                    });                    //初始化 custom 表单值-mode:[1: 暂时关闭],[2: 关闭],[3: 打开];                    var _curDevice = data;                    $scope.curDevice.setting = {                        updated_at: _curDevice.updated_at                    };                    var _curCustom = $scope.selected.custom;                    _curCustom.env.mode = (_curDevice.env_sampling_mode === 1);                    _curCustom.env.freq = { "value": _curDevice.env_sampling_freq };                    _curCustom.env.threshold = { "value": _curDevice.env_voltage_threshold };                    _curCustom.behavior.mode = (_curDevice.behavior_sampling_mode === 1);                    _curCustom.behavior.freq = { "value": _curDevice.behavior_sampling_freq };                    _curCustom.behavior.threshold = { "value": _curDevice.behavior_voltage_threshold };                    _curCustom.gprs.mode = (_curDevice.gprs_mode === 1);                    _curCustom.gprs.freq = { "value": _curDevice.gprs_freq };                    _curCustom.gprs.threshold = { "value": _curDevice.gprs_voltage_threshold };                    var tmp = selectService.checkMode(_curCustom);                    $scope.tabs.activeTab = tmp; //修改设备配置模式                    $scope.curDevice.downloaded_at = _curDevice.downloaded_at;                });            };            // 修改设备信息            $scope.save = function() {                var _device = device.mark ? ($filter('chFilter')('mark') + ": " + device.mark) : ("UUID: " + device.uuid);                var _sureText = {data: _device, type: "device_setting"};                var sureText = $filter('chFilter')(_sureText, "update");                var surePic = "/images/icon/icon-device12596.png";                var resolve = {                    // title: '修改确认',                    content: sureText,                    image: surePic,                    // event: 'test'                };                httpService.confirm(resolve,$scope);            }; //save            $scope.confirmSure = function () {                var _curDevice = $scope.currentDevice;//服务器                var _curData = $scope.modeset;//修改                var _putData = {                    "env_sampling_mode": 0,                    "env_sampling_freq": 0,                    "env_voltage_threshold": 0,                    "behavior_sampling_mode": 0,                    "behavior_sampling_freq": 0,                    "behavior_voltage_threshold": 0,                    "gprs_mode": 0,                    "gprs_freq": 0,                    "gprs_voltage_threshold": 0                };                // 当相应 mode === 0，freq 和 threshold 提交之前从数据库取到的值                angular.forEach(_curData, function (value, key, array) {                    var open = value.mode;                    var _tmpFreq = _curData[key].freq && _curData[key].freq.value;                    var _tmpThreshold = _curData[key].threshold && _curData[key].threshold.value;                    if(key === "env"){                        _putData.env_sampling_mode = open ? 1 : 2;                        _putData.env_sampling_freq = open ? parseInt(_tmpFreq) : parseInt(_curDevice.env_sampling_freq);                        _putData.env_voltage_threshold = open ? parseFloat(_tmpThreshold) : parseFloat(_curDevice.env_voltage_threshold);                    }else if(key === "behavior"){                        _putData.behavior_sampling_mode = open ? 1 : 2;                        _putData.behavior_sampling_freq = open ? parseInt(_tmpFreq) : parseInt(_curDevice.behavior_sampling_freq);                        _putData.behavior_voltage_threshold = open ? parseFloat(_tmpThreshold) : parseFloat(_curDevice.behavior_voltage_threshold);                    }else if(key === "gprs"){                        _putData.gprs_mode = open ? 1 : 2;                        _putData.gprs_freq = open ? parseInt(_tmpFreq) : parseInt(_curDevice.gprs_freq);                        _putData.gprs_voltage_threshold = open ? parseFloat(_tmpThreshold) : parseFloat(_curDevice.gprs_voltage_threshold);                    };                });                deviceService.updateDeviceSetting(deviceId,_putData,function (data) {                    angular.element('#myModal').fadeOut();//curDBEdit                    $timeout(angular.element('#myModal').remove());                });            }        }    ])    // 生物信息modal    .controller('biologicalModal.ctrl', [        '$scope', 'httpService',"$timeout", 'modalParams', 'timeService', '$filter', 'modalService','biologicalService','$rootScope',        function($scope, httpService,$timeout, modalParams, timeService, $filter, modalService,biologicalService,$rootScope) {            var curBioId = modalParams.biological.device_id;            $scope.currentBiologocal = {                "id": "", //捕捉鸟id                "bid": "", //捕捉鸟bid-自定义                "label": "", //label标记                "time": "", //设置日期                "location": "", //释放地点                "latitude": "", //纬度                "longitude": "", //经度                "species": "", //物种                "beek_length": "",                "age": "", //年龄                "gender": "", //性别                "weight": "", //重量                "head_length": "", //头羽长度                "wing_length": "", //翅膀长度                "tarsus_long": "", //tarsus长                "tarsus_short": "", //tarsus短                "primary_feather_length": "", //第九初羽长度                "swab": "", //样本采样                "feather": "", //羽毛采样                "blood": "", //血液采样                "note": "", //描述                "updated_at": ""            };            $scope.label = {                "neck": false,                "beak": false,                "back": false,                "leg": false            };            $scope.swab = {                "anal": false,                "throat": false            };            $scope.feather = {                "head": false,                "breast": false,                "covert": false,                "tail": false            };            init();            // 初始化生物信息表单            function init() {                if(true){                    angular.forEach($scope.currentBiologocal, function(value, key, array) {                        var cBio = modalParams.biological;                        if (cBio[key]) {                            if(key === "updated_at"){                                var time = $filter('unitFilter')(cBio[key],'updated_at');                                $scope.currentBiologocal[key] = time;                            }else if(key === "blood"){                                $scope.currentBiologocal[key] = (cBio[key]===1);                            }else{                                $scope.currentBiologocal[key] = cBio[key];                            };                        };                        var label = cBio.label && $filter("arrayStringFilter")(cBio.label).toString();                        var swab = cBio.swab && $filter("arrayStringFilter")(cBio.swab).toString();                        var feather = cBio.feather && $filter("arrayStringFilter")(cBio.feather).toString();                        angular.forEach($scope.label,function (value,key,array) {                            if(label && label.indexOf(key) >= 0){                                $scope.label[key] = true;                            };                        });                        angular.forEach($scope.swab,function (value,key,array) {                            if(swab && swab.indexOf(key) >= 0){                                $scope.swab[key] = true;                            };                        });                        angular.forEach($scope.feather,function (value,key,array) {                            if(feather && feather.indexOf(key) >= 0){                                $scope.feather[key] = true;                            };                        });                    });                };            };            // 修改生物信息            $scope.save = function() {                var _device = modalParams.biological.mark !== undefined ? ($filter('chFilter')('mark') + ":"+modalParams.biological.mark) : ("UUID:"+modalParams.biological.uuid);                var _sureText = {data: _device, type: "biological_info"};                var sureText = $filter('chFilter')(_sureText, "update");                var surePic = "/images/icon/icon-device12596.png";                var resolve = {                    // title: '修改确认',                    content: sureText,                    image: surePic,                    // event: 'test'                };                httpService.confirm(resolve,$scope);            }            $scope.confirmSure = function () {                var bioHeader = {                    id: curBioId,                    type: modalParams.type                };                var changedBio = $scope.currentBiologocal;                var _putData = {                    "device_id": changedBio.device_id,                    "bid": changedBio.bid,                    "label": [],                    "location": changedBio.location,                    "species": changedBio.species,                    "age": changedBio.age,                    "gender": changedBio.gender,                    "beek_length": parseInt(changedBio.beek_length),                    "weight": parseInt(changedBio.weight) || 0,                    "head_length": parseInt(changedBio.head_length) || 0,                    "wing_length": parseInt(changedBio.wing_length) || 0,                    "tarsus_long": parseInt(changedBio.tarsus_long) || 0,                    "tarsus_short": parseInt(changedBio.tarsus_short) || 0,                    "primary_feather_length": parseInt(changedBio.primary_feather_length) || 0,                    "swab": [],                    "feather": [],                    "blood": changedBio.blood ? "1" : "0",                    "note": changedBio.note,                    "timestamp": timeService.getTimeRFC3339() //当前时间                };                function upFirst(str) {                    return str.charAt(0).toUpperCase()+str.slice(1);                };                angular.forEach($scope.label,function (value,key,array) {                    if(value){                        var _tmp = upFirst(key);                        _putData.label.push(_tmp);                    };                });                angular.forEach($scope.swab,function (value,key,array) {                    if(value){                        var _tmp = upFirst(key);                        _putData.swab.push(_tmp);                    };                });                angular.forEach($scope.feather,function (value,key,array) {                    if(value){                        var _tmp = upFirst(key);                        _putData.feather.push(_tmp);                    };                });                _putData.label = "[" + _putData.label +"]";                _putData.swab = "[" + _putData.swab +"]";                _putData.feather = "[" + _putData.feather +"]";                biologicalService.updateBiological(bioHeader,_putData,function (data) {                    angular.element('#myModal').fadeOut();//curDBEdit                    $timeout(angular.element('#myModal').remove());                    $rootScope.$emit('biologicalRefresh',_putData);                });            }        }    ])    // 生物信息    .controller('biological.ctrl', [        '$scope', 'httpService','biologicalService','deviceService', '$stateParams', '$state',        function($scope, httpService,biologicalService,deviceService, $stateParams, $state) {            //i18nService.setCurrentLang($scope.currentLang);            var currentId = $stateParams.id;            init();            function init() {                $scope.gridBiological = {                    enablePaginationControls: true,                    enableRowSelection: true,                    enableColumnMenus: false,                    // enableSelectAll: true,                    enableRowHeaderSelection: false,                    multiSelect: false,                    modifierKeysToMultiSelect: false,                    rowHeight: $scope.rowHeight,                    paginationPageSizes: $scope.paginationPageSizes,                    paginationPageSize: $scope.pageLimit,                    onRegisterApi: function(gridApi) {                        $scope.gridApi = gridApi;                    }                };                getGrid();            };            function getGrid() {                var header = {};                if(currentId){                    deviceService.getDeviceBiologicalInfo(header,bioCallback);                }else{                    biologicalService.listBiological(header,bioCallback);                }               function bioCallback(data) {                    $scope.gridBiological.data = data;                };            };        }    ])    // 地图    .controller('gpsMap.ctrl', [        '$scope', '$stateParams', '$state', 'httpService','searchService','deviceService', 'mapService', '$filter', '$rootScope','$timeout','$window',        function($scope, $stateParams, $state, httpService,searchService,deviceService, mapService, $filter, $rootScope,$timeout,$window) {            var paramsID = $stateParams.id;            var paramsInfo = $stateParams.info;            var paramsType = $stateParams.type;            var state = $state.current.name;            init();            function init() {                $scope.monthDropdown = [-3,-6,-12];                $scope.markerCluster = true;                $scope.polyLine = true;                $scope.searchoutPinPic = "/images/pin-search1414.png";            }            // map显示信息            // var curMap = mapService.getMapSHow();            // var curMap = new Array();            function resizeGrid() {                $timeout(function () {                    var map = angular.element("#map-wrap");                    var isFlexBox = angular.element("#mapSearch");                    if(isFlexBox && map){                        var bodyHeight = isFlexBox[0].offsetHeight;//62                        // console.log("height:",bodyHeight,isFlexBox);                        var mapHeight = map[0].offsetHeight;                        $scope.mapSearchStyles = {                            'max-height': mapHeight - 26 + 'px',                        };                    }                },0);            }            window.onresize = function(event) {                // console.log('resize',event.target.innerHeight);                $timeout(resizeGrid,0);            };            $scope.$watch(function(){                return $window.innerHeight;            }, function(value,old) {                // console.log(value);                $timeout(resizeGrid,0);            });            $scope.initMap = function () {                // var markerCluster = $scope.markerCluster; //默认包含                var polyLine = $scope.polyLine;                // $scope.$emit('showLoadingYellow', "loading");                getDeviceAll();                if (paramsID) { //单个设备所有点                    (!$scope.lastMonth) && ($scope.lastMonth = -3);                    var header = {                        sort: 'timestamp',                        last: $scope.lastMonth                    };                    deviceService.getDeviceGps(paramsID,header,mapPathCallback,mapErrorCallback);                }                else{ //查看所有设备最后更新点                    polyLine = $scope.polyLine = false;                    var header = {};                    if(state === 'map.gps.search'){                        if(paramsType === 'uuid'){                            var putData = {                                uuid: paramsInfo,                            };                            searchService.deviceByUUID(header,putData,mapCallback,mapErrorCallback);                        }else{//mark                            searchService.deviceByMark(header,paramsInfo,mapCallback,mapErrorCallback);                        }                    }else{                        deviceService.listDevices(header,mapCallback,mapErrorCallback);                    }                };                function mapCallback(data) {                    mapService.initMap(data,false);                    $scope.mapNote = $filter('chFilter')('device_latest_loc') + ' <span class="yellow">(' + data.length + ')</span>';                    resizeGrid();                }                function mapPathCallback(data) {                    mapService.initMap(data,true);                    $scope.mapNote = data[0].mark ? $filter('chFilter')('mark') + ': <span class="yellow">' + data[0].mark + '</span>' : 'UUID: <span class="yellow">' + data[0].uuid + '</span>';                    resizeGrid();                }                function mapErrorCallback() {                    $scope.closeMap();                }            };                        $scope.setLastMonth = function (month) {                $scope.lastMonth = month;                mapService.clearShowingDevice();                $scope.initMap();                angular.forEach($scope.activeDevice,function (value) {                    mapService.showDevice(value,$scope.lastMonth,function () {                                            });                });            }                        // 返回上一页            $scope.closeMap = function() {                history.go(-1);            };            // 显示/隐藏集合            $scope.toggleCluster = function () {                mapService.toggleMarkerCluster();                // var mapData = mapService.getMapData();                // mapService.initMap(mapData,$scope.polyLine,$scope.markerCluster);            };            $rootScope.$on('searchRange',function (event,array) {                $scope.activeDevice = new Array();                $scope.searchDevice = {mark: ''};                $scope.searchRangeDevices = array;                $timeout(function () {                    mapService.autoListDivHeight();                },0);            });            // 搜索框内容为空时清空搜索结果            $scope.$watch('searchDevice.mark', function (newVal, oldVal) {                if(newVal){                    $timeout(function () {                        mapService.autoListDivHeight();                    },300);                }            });            // 收起搜索结果            $scope.closeSearchList = function () {                angular.element('#searchList').slideToggle();                angular.element("#mapSearch").toggleClass('open');                $timeout(function () {                    resizeGrid();                    mapService.autoListDivHeight();                },300);            }            // 获取所有设备            function getDeviceAll() {                var headers = {};                deviceService.listDevices(headers,function (data) {                    $scope.searchOutDevice = data;                });            }            // 显示单个设备所有点            $scope.showDevice = function (id) {                if(!$scope.lastMonth){                    $scope.lastMonth = -3;                }                mapService.showDevice(id,$scope.lastMonth,function (activeDevices) {                    $scope.activeDevice = activeDevices;                });            }            // 显示单个设备搜索范围内所有点            $scope.showRangeDevice = function (id) {                mapService.showRangeDevice(id,function (activeDevices) {                    $scope.activeDevice = activeDevices;                });            }            // 清空对比设备            $scope.clearSearch = function () {                mapService.clearSearch();            }        }    ])    // 地理围栏    .controller('fenceMap.ctrl', [        "$scope","mapService","httpService","$rootScope","$state","$stateParams","fenceService",        function ($scope,mapService,httpService,$rootScope,$state,$stateParams,fenceService) {            var state = $scope.state = $state.current.name;            // console.log(state);            init();            function init() {                // mapService.initFence({});                getFences();            }            $scope.editFence = function (id) {                $state.go("fence.edit",{"id": id});            }            $scope.highLightFence = function (id) {                $scope.activeFence = id;                mapService.highLightFence(id);            }            function getFences() {                var header = {};                fenceService.listFence(header,function (data) {                    $scope.fences = data;                    mapService.initFence(data);                });            }        }    ])    // 创建／编辑地理围栏    .controller('fenceMapEdit.ctrl', [        "$scope","mapService","httpService","$rootScope","$state","$stateParams","modalService","$filter","fenceService",        function ($scope,mapService,httpService,$rootScope,$state,$stateParams,modalService,$filter,fenceService) {            var state = $scope.state = $state.current.name;            var paramsID = $stateParams.id;            var maxFenceArea = $scope.maxFenceArea = mapService.getMaxFenceArea();            // console.log(state);            init();            function init() {                $scope.newFence = {                    area: null                };                if(state === "fence.edit"){                    // showFenceDevice();                    getCurrentFence();                }else{                    mapService.initFence({});                }            }            function getCurrentFence() {                fenceService.getFenceByID(paramsID,function (data) {                    $scope.newFence = data;                    $scope.newFence.area = {};                    var type = data.type && data.type.toLowerCase();                    mapService.initFence([data]);                    $scope.newFence.name = data.area_name;                    $scope.newFence.msg_type = (data.msg_type === 1);                    $scope.newFence.devices = data.device_id;                    // console.log(tmpFence);                    if(type === "round"){                        $scope.newFence.area.circle = {};                        $scope.newFence.area.circle.center = data.point;                        $scope.newFence.area.circle.radius = data.distance;                    }else if(type === "polygon"){                        var bounds = data.polygon.points;                        $scope.newFence.area.rectangle = {};                        $scope.newFence.area.rectangle.northWest = bounds[0];                        $scope.newFence.area.rectangle.southEast = bounds[3];                    }                    $scope.newFence.area.acreage = mapService.getShapeAcreage(data);                },function () {                    history.go(-1);                });            }                        function showFenceDevice() {                fenceService.getFenceDevice(paramsID,function (data) {                    mapService.pushMarkers(data);                });            }            $rootScope.$on('newFenceRectangle',function (event,args) {                setTimeout(function () {                    $scope.newFence.area = args;                    $scope.$apply();                },0);            });            $rootScope.$on('newFenceCircle',function (event,args) {                setTimeout(function () {                    $scope.newFence.area = args;                    $scope.$apply();                },0);            });            $scope.refreshCircleCenter = function () {                var _circle = $scope.newFence.area.circle;                $rootScope.$emit('editFenceCenter',_circle);            }            $scope.refreshCircleRadius = function () {                var _circle = $scope.newFence.area.circle;                $rootScope.$emit('editFenceRadius',_circle);            }            $scope.refreshRectangle = function () {                var bounds = $scope.newFence.area.rectangle;                $rootScope.$emit('editFenceBounds',bounds);            }            /**             * 删除围栏             */            $scope.deleteFence = function () {                var fence = $scope.newFence.area_name;                var sureText = $filter("chFilter")("confirm_delete_fence","fence",fence);                var resolve = {                    // title: "删除确认",                    content: sureText,                    event: 'delete'                };                modalService.confirm(resolve,$scope);            }            function deleteFence(fence_id) {                var fence = $scope.newFence.name;                fenceService.deleteFenceByID(fence_id,function (data) {                    var deleteFenceTips = $filter("chFilter")("delete_fence_success","fence",fence);                    httpService.myAlert('success',deleteFenceTips);                    history.go(-1);                });            }            // 创建围栏            $scope.createFence = function () {                var new_fence = $scope.newFence;                var area_name = new_fence.name;                var putData = {};                var valid = true;                modalService.showLoading();                if(new_fence.area){                    var circle = new_fence.area.circle;                    var rectangle = new_fence.area.rectangle;                    var area = new_fence.area.acreage;                    if(area_name){                        putData.area_name = area_name;                        putData.msg_type = new_fence.msg_type ? 1 : 2;                        if(circle){                            putData.type = "Round";                            // putData.point = {};                            // putData.point.latitude = circle.center.lat;                            // putData.point.longitude = circle.center.lng;                            var center = mapService.validLatLng(circle.center);                            var radius = parseInt(circle.radius);                            if(center && (radius > 0)){                                putData.point = center;                                putData.distance = radius;                            }else{                                valid = false;                            }                        }else if(rectangle){                            putData.type = "Polygon";                            var points = mapService.formatPolygonRequestArray(rectangle.northWest,rectangle.southEast);                            if(points){                                var path = {                                    points: points                                };                                putData.polygon = path;                            }else{                                valid = false;                            }                        };                        if(valid){                            if(area <= maxFenceArea){                                fenceService.addFence(putData,function (data) {                                    history.go(-1);                                });                            }else{                                var recExceedTips = $filter("chFilter")("rectangle_exceed","fence");                                httpService.myAlert("danger",recExceedTips);                            }                        }else{                            var dataTips = $filter("chFilter")("data_error","fence");                            httpService.myAlert("danger",dataTips);                        }                    }else{                        var emptyFenceNameTips = $filter("chFilter")("empty_fence_name","fence");                        httpService.myAlert('danger',emptyFenceNameTips);                    }                }else{                    var emptyFenceRange = $filter("chFilter")("empty_fence_range","fence");                    httpService.myAlert("danger",emptyFenceRange);                }                modalService.hideLoading();            }            // 保存／修改围栏            var refreshFence = $scope.refreshFence = function () {                var new_fence = $scope.newFence;                var circle = new_fence.area.circle;                var rectangle = new_fence.area.rectangle;                var area_name = new_fence.name;                var putData = {};                var valid = true;                var area = Math.round(new_fence.area.acreage);                modalService.showLoading();                if(area_name){                    putData.area_name = area_name;                    putData.msg_type = new_fence.msg_type ? 1 : 2;                    if(circle){                        putData.type = "Round";                        // putData.point = {};                        // putData.point.latitude = circle.center.lat;                        // putData.point.longitude = circle.center.lng;                        var center = mapService.validLatLng(circle.center);                        var radius = parseInt(circle.radius);                        if(center && (radius > 0) && (radius*radius*Math.PI <= maxFenceArea)){                            putData.point = center;                            putData.distance = radius;                        }else{                            valid = false;                        }                    }else if(rectangle){                        var nw = rectangle.northWest;                        var se = rectangle.southEast;                        if(nw.lat && nw.lng && se.lat && se.lng){                            putData.type = "Polygon";                            var points = mapService.formatPolygonRequestArray(rectangle.northWest,rectangle.southEast);                            if(points){                                var path = {                                    points: points                                };                                putData.polygon = path;                            }else{                                valid = false;                            }                        }else{                            valid = false;                        }                    }                    if(valid){                        if(area <= maxFenceArea){                            fenceService.updateFence(paramsID,putData,function (data) {                                var editTips = $filter("chFilter")("edit_fence_success","fence");                                httpService.myAlert("success",editTips);                                history.go(-1);                            });                        }else{                            var exceedAreaTips = $filter("chFilter")("exceed_fence_area","fence");                            httpService.myAlert("danger",exceedAreaTips);                        }                    }else{                        var checkFenceTips = $filter("chFilter")("data_error","fence");                        httpService.myAlert("danger",checkFenceTips);                    }                }else{                    var emptyFenceNameTips = $filter("chFilter")("empty_fence_name","fence");                    httpService.myAlert('danger',emptyFenceNameTips)                }                modalService.hideLoading();            }            // 取消编辑            $scope.cancel = function (dirty) {                if(dirty){                    var fence = $scope.newFence.name;                    var sureText = $filter("chFilter")("nosave_fence_ask","fence",fence);                    var resolve = {                        // title: "删除确认",                        content: sureText,                        event: 'back'                    };                    modalService.confirm(resolve,$scope);                }else{                    history.go(-1);                }            }            $rootScope.$on('refreshFence',function (event,args) {                refreshFence();            });            // 添加设备            $scope.addDevice = function (dirty) {                if(dirty){                    var fence = $scope.newFence.name;                    var sureText = $filter("chFilter")("nosave_fence_ask_save","fence",fence);                    var resolve = {                        // title: "保存确认",                        content: sureText,                        event: 'save'                    };                    modalService.save(resolve,$scope);                }else{                    $state.go("fence.edit.device");                }            }            $scope.confirmSure = function (act) {                if(act === 'delete'){                    var id = $stateParams.id;                    deleteFence(id);                }else if(act === 'back'){                    history.go(-1);                }else if(act === 'save'){                    refreshFence();                    $state.go("fence.edit.device");                }            }            $scope.confirmCancel = function (act) {                if(act === 'save'){                    $state.go("fence.edit.device");                }            }        }    ])    // 添加设备到围栏    .controller('fenceDeviceAdd.ctrl', [        "$scope","mapService","httpService","$rootScope","$state","$stateParams","$filter","fenceService","deviceService",        function ($scope,mapService,httpService,$rootScope,$state,$stateParams,$filter,fenceService,deviceService) {            var state = $scope.state = $state.current.name;            var fenceID = $stateParams.id;            $scope.addedDevices;            init();            function init() {                // $scope.$emit("showLoadingYellow");                $scope.newFence = {                    area: null                };                getFences();            }            $rootScope.$on('newFenceRectangle',function (event,args) {                setTimeout(function () {                    $scope.newFence.area = args;                    $scope.$apply();                },0);            });            $rootScope.$on('newFenceCircle',function (event,args) {                setTimeout(function () {                    $scope.newFence.area = args;                    $scope.$apply();                },0);            });            $scope.refreshCircleCenter = function () {                var _circle = $scope.newFence.area.circle;                $rootScope.$emit('editFenceCenter',_circle);            }            $scope.refreshCircleRadius = function () {                var _circle = $scope.newFence.area.circle;                $rootScope.$emit('editFenceRadius',_circle);            }            $scope.refreshRectangle = function () {                var bounds = $scope.newFence.area.rectangle;                $rootScope.$emit('editFenceBounds',bounds);            }            $scope.deleteFence = function () {                var id = $stateParams.id;                fenceService.deleteFenceByID(id,function (data) {                    history.go(-1);                });            }            function getFences() {                fenceService.getFenceByID(fenceID,function (data) {                    mapService.initFence([data]);                    $scope.addedDevices = data.device_id;                    getAlldevices();                });            }            function getAlldevices() {                var header = {};                deviceService.listDevices(header,function (data) {                    var _added = $scope.addedDevices;                    $scope.allDevices = data;                    if(_added){                        angular.forEach($scope.allDevices,function (value,index) {                            for(var i=0;i< _added.length;i++){                                if(_added[i] === value.id){                                    value.choose = true;                                    mapService.pushMarkers([value]);                                }                            }                        });                    }                });            }                        $scope.addDevice = function (array) {                var device_id = array.id;                var add = array.choose;                var putData = {                    id: [device_id]                };                if(add){                    fenceService.addDeviceToFence(fenceID,putData,function (data) {                        getDeviceLastGps(device_id);                    });                }else{                    fenceService.removeDeviceFromFence(fenceID,putData,function (data) {                        mapService.removeMarker(device_id);                    });                }            }            function getDeviceLastGps(id) {                deviceService.getDeviceByID(id,function (data) {                    mapService.pushMarkers([data]);                });            }                        $scope.chooseAll = function () {                var allDevices = $scope.allDevices;                var choose = $scope.chooseAllDevice;                var putData = {                    id: []                };                angular.forEach(allDevices, function (value,index) {                    value.choose = choose;                    if(choose){                        choose && putData.id.push(value.id);                        // getDeviceLastGps(value.id);                    }else{                        // mapService.removeMarker(value.id);                    }                });                fenceService.setFenceDevice(fenceID,putData,function (data) {                    init();                });            }            $scope.createFence = function () {                var new_fence = $scope.newFence;                var circle = new_fence.area.circle;                var rectangle = new_fence.area.rectangle;                var area_name = new_fence.name;                var putData = {};                if(area_name){                    putData.area_name = area_name;                    putData.msg_type = new_fence.msg_type ? 1 : 2;                    if(circle){                        putData.type = "Round";                        // putData.point = {};                        // putData.point.latitude = circle.center.lat;                        // putData.point.longitude = circle.center.lng;                        putData.point = circle.center;                        putData.distance = parseInt(circle.radius);                    }else if(rectangle){                        putData.type = "Polygon";                        var path = {                            points: mapService.formatPolygonRequestArray(rectangle.northWest,rectangle.southEast)                        };                        putData.polygon = path;                    }                    if(true){                        fenceService.addFence(putData,function (data) {                            history.go(-1);                        });                    }                }else{                    var emptyFenceNameTips = $filter("chFilter")("empty_fence_name","fence");                    httpService.myAlert('danger',emptyFenceNameTips)                }            }        }    ])    // 设备关联围栏    .controller('deviceFence.ctrl', [        "$scope","mapService","httpService","$rootScope","$state","$stateParams","modalService","$filter","fenceService","deviceService","$timeout",        function ($scope,mapService,httpService,$rootScope,$state,$stateParams,modalService,$filter,fenceService,deviceService,$timeout) {            var state = $scope.state = $state.current.name;            // console.log(state);            init();            function init() {                // $scope.$emit("showLoadingYellow");                mapService.initFence({});//初始化地图                getAlldevices();            }            // 高亮围栏            $scope.highLightFence = function (id) {                $scope.activeFence = id;                mapService.highLightFence(id);            }            // 查看围栏            $scope.goFence = function (id) {                $state.go('fence.edit',{id:id});            }            // 从设备下移除围栏            $scope.removeFence = function (fence) {                $scope.removeFromFence = fence;                // var fenceID = fence.id;                var  curDevice= $scope.curViewDevice;                var fence = fence.area_name;                var device = curDevice.mark ? curDevice.mark : curDevice.uuid;                var sureInfo = {                    fence: fence,                    device: device                };                var sureText = $filter("chFilter")("confirm_remove_device","fence",sureInfo);                var resolve = {                    // title: "移除确认",                    content: sureText,                    event: 'remove'                };                modalService.confirm(resolve,$scope);            }            $scope.confirmSure = function (act) {                if(act === 'remove'){                    removeDeviceFromFence();                }            }            function removeDeviceFromFence() {                var fenceID = $scope.removeFromFence.id;                var deviceID = $scope.curViewDevice.id;                var putData = {                    id: [deviceID]                };                fenceService.removeDeviceFromFence(fenceID,putData,function (data) {                    angular.forEach($scope.underAreas,function (value,index) {                        if(value.id === fenceID){                            $scope.underAreas.splice(index,1);                        }                    });                });            }            // 查看设备关联围栏列表            var viewDevice = $scope.viewDevice = function (device) {                var curID = device.id;                $scope.curViewDevice = device;                fenceService.listDeviceInFence(curID,function (data) {                    mapService.drawAreas(data);                    $scope.underAreas = data;                    angular.forEach($scope.underAreas,function (value,index) {                        value.acreage = mapService.getShapeAcreage(value);                    });                })            }            function getAlldevices() {                var header = {};                deviceService.listDevices(header,function (data) {                    $scope.allDevices = data;                });            }            $scope.editFence = function (id) {                $state.go("fence.edit",{"id": id});            }        }    ])    // 搜索    .controller('search.ctrl',[        "$scope", "$state", "httpService","$stateParams",        function ($scope, $state, httpService, $stateParams) {            // 用户输入的搜索信息            // var searchInfo = $stateParams.searchData;            var searchType = $stateParams.type;            var state = $state.current.name;            //搜索结果展示页            $scope.searchOutPage = "";            // 切换搜索项            $scope.setCurMode = function () {                setTimeout(function () {                    searchType = $scope.tabs.activeTab;                    $scope.select = select[searchType];                    $scope.$apply();                },0);            };            initSearch();            // 初始化高级搜索框            function initSearch() {                if(state === "search.device"){                    $scope.searchOutPage = "/discovery/device/devicelist.html";                }                else if(state === "search.gps"){                    $scope.searchOutPage = "/discovery/class/gps.html";                }                else if(state === "search.behavior"){                    $scope.searchOutPage = "/discovery/class/behavior.html";                }                else{                    $state.go("home");                };            };        }    ])    // 高级搜索    .controller('superSearch.ctrl',[        "$scope", "httpService", "modalService", "timeService", "$sce", "$state","$stateParams",        function ($scope, httpService, modalService, timeService, $sce, $state,$stateParams) {            // 选项卡菜单            $scope.tabs = [                {                    "title": "gps",                    "showAs": "GPS数据"                },                // {                //     "title": "behavior",                //     "showAs": "行为数据"                // }            ];            // 可搜索列表下拉框            var select = {                gps: ["mark","uuid","timestamp","updated_at","longitude","latitude","altitude","humidity","temperature","light","pressure","dimension","used_star","speed","horizontal","vertical","signal_strength","battery_voltage"],                // behavior: ["activity_time","sleep_time","activity_expend","sleep_expend"]            };            // 默认筛选项            var option = $scope.searchList = [                {                    name: "timestamp",                    value: [],                },                // {                //     name: "temperature",                //     value: [],                // }            ];            // 定位模式下拉框            $scope.selectdimension = [1,2];            // 搜索事件            $scope.save = function () {                var check = true;                var activeTab = $scope.tabs.activeTab;                var searchList = $scope.searchList;                var searchLength = searchList.length;console.log(searchList);                var putData = {};                // 清除上次搜索信息                angular.forEach($stateParams,function (value,key) {                    if(value){                        putData[key] = undefined;                    }                });                // 读取用户选择信息                for(var i=0;i<searchLength;i++){                    var tmp = [];                    var _key = searchList[i].name;                    if(searchList[i].value !== null && searchList[i].value !== "" && searchList[i].value !== [] && _key){                        putData[_key] = [];                        angular.forEach(searchList[i].value, function (value,index) {                            if(_key === "timestamp" || _key === "updated_at"){                                var _value = timeService.getLocalTimeRFC3339(value);                                tmp.push(_value);                            }                            else if(_key === "mark"){                                tmp = parseInt(value);                            }                            else if(_key === "uuid")                            {                                tmp = value;                            }else if(_key){                                tmp.push(value);                            };                        });                        putData[_key] = tmp;                    };                };                // 判断搜索范围有效性                angular.forEach(putData, function (value,key) {                    if(key !== "mark" && key !== "uuid"){                        if(value && value.length > 1){                            if(key === "timestamp" || key === "updated_at"){                                (value[1] < value[0]) && (check = false);                            }else{                                (parseFloat(value[1]) < parseFloat(value[0])) && (check = false);                            }                            putData[key] = value.toString();                        }                    }                });                if(check){                    var goingState = "search." + activeTab;                    $state.go(goingState,putData);                };                return check;            };            // 添加一个筛选项            $scope.addSearch = function () {                var _searchList ={                    name: null,                    value: null,                };                (option.length < 3) ? $scope.searchList.push(_searchList) : null;            };            // 删除一个筛选项            $scope.removeClick = function (index) {                (option.length > 1) ? $scope.searchList.splice(index,1) : null;            };            init();            // 初始化高级搜索框            function init() {                // 默认搜索选项                var activeTab = $scope.tabs.activeTab = "gps";                // 设置默认搜索项-列表                setTimeout(function () {                    $scope.select = select[activeTab];                    // $scope.apply();                },0);            };        }    ])    // 数据分析    .controller('dataAnalysis.ctrl',[        '$scope', 'httpService', '$state', '$filter', 'jsonService','$window', 'modalService', 'chartService','deviceService','timeService','$timeout',        function ($scope, httpService, $state, $filter, jsonService,$window, modalService, chartService,deviceService,timeService,$timeout) {            var chartSeries = new Array();            init();            function init() {                $scope.chartType = ['line','column','scatter'];                $scope.activeType = 'line';                $scope.showAnly = false;                $scope.anlyDevice = chartService.getDeviceAnly();                $scope.anlyDeviceKey = chartService.getKeyAnly();                $scope.color = chartService.getColor();                chartSeries = chartService.getChartSeries();                if(chartSeries){                    setSeries(chartSeries);                };                getAlldevice();            };            function getAlldevice() {                var header = {                  sort: 'mark'                };                deviceService.listDevices(header,function (data) {                    chartService.setDeviceAll(data);                    var deviceMark = [];                    angular.forEach(data,function (value,index) {                        var test = {                            id: value.id,                            mark: value.mark,                            uuid: value.uuid,                        };                        deviceMark.push(test);                    });                    $scope.allDeviceLength = deviceMark.length;                    $scope.allDevice = deviceMark;                });            }            // 添加设备            $scope.addDevice = function (type) {                var param = {                    template: '/discovery/data/device_anly.tpl.html',                    controller: "dataAnlyTpl.ctrl"                };                modalService.modal(param,{},$scope,function () {                    $scope.anlyDevice = chartService.getDeviceAnly();                });            };            // 添加对比项            $scope.addDeviceKey = function (type) {                var param = {                    template: '/discovery/data/device_key_anly.tpl.html',                    controller: "dataAnlyTpl.ctrl"                };                modalService.modal(param,{},$scope,function () {                    $scope.anlyDeviceKey = chartService.getKeyAnly();                });            };            // 删除设备            $scope.delDeviceKey = function (index) {                chartService.delKeyAnly(index);            };            // 删除对比项            $scope.delDevice = function (index) {                chartService.delDeviceAnly(index);            };            // 生成图表            $scope.loadChart = function () {                var header;                var chartDevice = $scope.anlyDevice;//设备                var chartDeviceKey = $scope.anlyDeviceKey;//对比项                var mLen = chartDevice ? chartDevice.length : 0;                var kLen = chartDeviceKey ? chartDeviceKey.length : 0;                var validChoose = chartService.validChoose(mLen,kLen);                var fromDate = $filter('unitFilter')($scope.fromDate,'server_date');                var untillDate = $filter('unitFilter')($scope.untillDate,'server_date');                if(fromDate || untillDate){                    if(!fromDate){                        $filter('chFilter')("请选择开始时间");                    }if(!untillDate){                        $filter('chFilter')("请选择结束时间");                    }else{                        header = {                            begin: fromDate,                            end: untillDate                        };                    }                }else{                    header = {                        last: -3                    };                }                if(validChoose && header){                    drawChartSeries(chartDevice,chartDeviceKey,header);                    // chartSeries = new Array();                    // chartService.setChartSeries(chartDevice,chartDeviceKey,header);                    // chartSeries = chartService.getChartSeries();                    // chartSeries && setSeries(chartSeries);                }else{                    console.log('chart not ready');                };            };            function drawChartSeries(device,key,header) {                chartSeries = new Array();                chartService.setChartSeries(device,key,header);                chartSeries = chartService.getChartSeries();                chartSeries && setSeries(chartSeries);            }            $scope.clearDate = function () {                $scope.fromDate = null;                $scope.untillDate = null;            }            // 切换图表类型            $scope.reloadSeries = function (type) {                $scope.activeType = type;                setSeries(chartService.getChartSeries());            };            // 自适应图表            function chartReflow() {                $scope.$broadcast('highchartsng.reflow');            };            // 渲染图表            function setSeries(series) {                var chartDevice = $scope.anlyDevice;//设备                var chartDeviceKey = $scope.anlyDeviceKey;//对比项                var mLen = chartDevice ? chartDevice.length : 0;                var kLen = chartDeviceKey ? chartDeviceKey.length : 0;                var tootip,yAxis,titleKey,labelFormatter;                tootip = {                    shared: true,                    crosshairs: true,                };                yAxis = {                    lineWidth: 1,                    tickWidth: 1,                    opposite: false,                    title: {                        text: $filter('chFilter')(titleKey,'chart'),                    }                };                var myChart = new Array();                if(kLen === 1){                    myChart.title = $filter('chFilter')(chartDeviceKey[0],'chart');                    myChart.unit = " " + $filter('unitFilter')(chartDeviceKey[0]);                    tootip.valueSuffix = myChart.unit;                    tootip.formatter = function () {                        var s = '<div>' + $filter("date")(this.x, "yyyy-MM-dd HH:mm:ss","UTC");                        $.each(this.points, function () {                            s += '<br/><div><span style="color: ' + this.series.color + '">' + this.series.name + '</span>: ' +                                this.y + " " + myChart.unit + '</div>';                        });                        s += '</div>';                        return s;                    };                    yAxis.title = {                        text: myChart.title,                    };                    labelFormatter = 0;                    myChart.title += "(" + myChart.unit + ")";                }else{                    tootip.formatter = function () {                        var s = '<div style="color: #000">' + $filter("date")(this.x, "yyyy-MM-dd HH:mm:ss","UTC");                        $.each(this.points, function () {                            s += '<br/><div><span style="color: ' + this.series.color + '">' + $filter("chFilter")(this.series.name,"chart") + '</span>: ' +                                $filter("unitFilter")(this.y,this.series.name) + '</div>';                        });                        s += '</div>';                        return s;                    };                    myChart.title = chartDevice[0].mark ? chartDevice[0].mark : chartDevice[0].uuid;                    var _yAxis = [];                    angular.forEach(chartDeviceKey, function (value,index) {                        var tmp = {                            className: 'highcharts-color-'+ (index+1),                            lineWidth: 1,                            tickWidth: 1,                            title: {                                text: $filter('chFilter')(value,'chart'),                            },                        };                        (index%2 === 1) ? (tmp.opposite = true) : (tmp.opposite = false);                        _yAxis.push(tmp);                    });                    yAxis = _yAxis;                    labelFormatter = 1;                };                myChart.yAxis = yAxis;                myChart.tootip = tootip;                $scope.chartConfig = null;                // console.log($scope.anlyDevice)                var dateTimeLabelFormats = {                    millisecond: '%H:%M:%S.%L',                    second: '%H:%M:%S',                    minute: '%H:%M',                    hour: '%H:%M',                    day: '%m.%e',                    week: '%m-%e',                    month: '%Y-%m',                    year: '%Y'                };                var chartType = $scope.activeType;                var useStock = true;                if(chartType === 'scatter'){                    tootip.formatter = null;                };                Highcharts.setOptions({                    global : {                        useUTC: true,                        // timezoneOffset: -480                    }                });                $scope.chartConfig = {                    title: {                        text: myChart.title,//                        align: "left",                        margin: 50,                        useHTML: true,                        widthAdjust: -200,                        style: {                            "font-size": "12px"                        }                    },                    subtitle: {                        text: ''                    },                    options: {                        chart: {                            type: chartType,                            // zoomType: 'x',                        },                        tooltip: myChart.tootip,                        plotOptions: {                            spline: {                                marker: {                                    enabled: true                                }                            },                            line: {                                connectNulls:true,//该设置会连接空值点                            }                        },                        xAxis: {                            type: 'datetime',                            breaks: [{                                breakSize: 0                            }],                            dateTimeLabelFormats: dateTimeLabelFormats,                        },                        yAxis: myChart.yAxis,                        lang: {                            contextButtonTitle: $filter('chFilter')("context_button_title","$locale"),                            decimalPoint:".",                            downloadJPEG: $filter('chFilter')("download_jpeg","$locale"),                            downloadPDF: $filter('chFilter')("download_pdf","$locale"),                            downloadPNG: $filter('chFilter')("download_png","$locale"),                            downloadSVG: $filter('chFilter')("download_svg","$locale"),                            drillUpText: "返回 {series.name}",                            loading: "加载中",                            months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],                            noData:"没有数据",                            numericSymbols: [ "千" , "兆" , "G" , "T" , "P" , "E"],                            printChart: $filter('chFilter')("print_chart","$locale"),                            rangeSelectorFrom: "开始时间",                            rangeSelectorTo: "截至时间",                            rangeSelectorZoom: "缩放",                            resetZoom:"恢复缩放",                            resetZoomTitle:"恢复图表",                            shortMonths: [ "Jan" , "Feb" , "Mar" , "Apr" , "May" , "Jun" , "Jul" , "Aug" , "Sep" , "Oct" , "Nov" , "Dec"],                            shortMonths: ["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],                            thousandsSep:",",                            weekdays: ["星期一", "星期二", "星期三", "星期三", "星期四", "星期五", "星期六","星期天"]                        },                        colors: $scope.color,                        exporting: {                            enabled: true                        },                        legend: {                            enabled: true,                            align: 'center',                            verticalAlign: 'top',                            y: 20,                            floating: true,                            borderWidth: 0,                            margin: 20,                            labelFormatter: function () {                                var label = $filter('chFilter')(this.name,'chart');                                if(labelFormatter === 1){                                    label += "(" + $filter('unitFilter')(this.name) + ")";                                };                                return label;                            }                        },                        rangeSelector: {                            enabled: true,                            buttons: [                                {                                    type: 'day',                                    count: 1,                                    text: '1'+$filter('chFilter')("unit_day","$locale")                                },                                {                                    type: 'week',                                    count: 1,                                    text: '1'+$filter('chFilter')("unit_week","$locale")                                },                                {                                    type: 'month',                                    count: 1,                                    text: '1'+$filter('chFilter')("unit_month","$locale")                                },                                {                                    type: 'month',                                    count: 3,                                    text: '3'+$filter('chFilter')("unit_month","$locale")                                },                                {                                    type: 'month',                                    count: 6,                                    text: '6'+$filter('chFilter')("unit_month","$locale")                                },                                // {                                //     type: 'ytd',                                //     text: 'YTD'                                // },                                {                                    type: 'year',                                    count: 1,                                    text: '1'+$filter('chFilter')("unit_year","$locale")                                },                                {                                    type: 'all',                                    text: $filter('chFilter')("all","$locale")                                }                            ],                            // buttonTheme: { // styles for the buttons                            //     fill: 'none',                            //     stroke: 'none',                            //     'stroke-width': 0,                            //     r: 6,                            //     style: {                            //         color: '#42B6DB',                            //         fontWeight: 'bold',                            //         padding: "5px 10px"                            //     },                            //     states: {                            //         hover: {                            //         },                            //         select: {                            //             fill: '#42B6DB',                            //             style: {                            //                 color: 'white'                            //             }                            //         }                            //         // disabled: { ... }                            //     }                            // },                            inputDateFormat: '%Y-%m-%d',// %H:%M:%S                            // inputDateParser: function (value) {                            //     value = value.split('-');                            //     return Date.UTC(                            //         parseInt(value[2]),                            //         parseInt(value[1]) - 1,                            //         parseInt(value[0])                            //     );                            // },                            // inputEditDateFormat: '%Y-%m-%d',                            // inputEnabled: true,                            // inputPosition: {                            //     align: 'right',                            // }                        },                        navigator: {                            enabled: true,                        },                    },                    series: series,                    credits:{                        enabled: true,                        // href: "http://new.druidtech.cn",                        // text: '成都德鲁伊科技'                    },                    loading: false,                    size: {},                    useHighStocks: useStock                };                // toggleAside();            };            // 隐藏筛选框            $scope.toggleAside = function(){                toggleAside();            };            function toggleAside() {                $scope.showAnly = !$scope.showAnly;                angular.element('#dataAside').slideToggle();                setTimeout(chartReflow,0);            };            angular.element($window).bind('resize', function() {                // console.log('resize');                chartReflow();            })        }    ])    // 数据分析    .controller('dataAnlyTpl.ctrl',[        '$scope', 'httpService', 'chartService', '$filter','deviceService',        function ($scope, httpService, chartService,$filter,deviceService) {            var limitDeviceChart = {mark:10,key:10};//最多同时对比的设备个数／最多同时可对比的对比项            init();            function init() {                $scope.anlyDevice = chartService.getDeviceAnly();                $scope.allDeviceKey = chartService.getKeyAll();                $scope.anlyDeviceKey = chartService.getKeyAnly();                $scope.allDeviceKeyLength = $scope.allDeviceKey.length;                var header = {                  sort:  "mark",                };            };            // 增加设备            $scope.addDevice = function (device) {                var anlyDevice = $scope.anlyDevice;                var anlyDeviceKey = $scope.anlyDeviceKey;                var keyLen = anlyDeviceKey ? anlyDeviceKey.length : 0;                var len = anlyDevice ? anlyDevice.length : 0;                if(len < limitDeviceChart.mark){                    if(keyLen > 1){                        var tmp = [];                        tmp.push(device);                        $scope.anlyDevice = tmp;                    }else{                        var anlyData = anlyDevice ? JSON.stringify(anlyDevice) : $scope.anlyDevice = new Array();                        if((anlyData && (anlyData.indexOf(device.id) < 0)) || !anlyData){                            $scope.anlyDevice.push(device);                        };                    };                }else{                    httpService.myAlert('info',$filter('chFilter')('selected_device_max','data-inside',limitDeviceChart.mark));//"最多选择" + limitDeviceChart.mark + "个设备！"                };            };            // 删除设备            $scope.delDevice = function (device) {                var anlyDevice = $scope.anlyDevice;                var dev = anlyDevice[device];                $scope.anlyDevice.splice(device,1);            };            // 增加对比项            $scope.addDeviceKey = function (key) {                var anlyDevice = $scope.anlyDevice;                var anlyDeviceKey = $scope.anlyDeviceKey;                var devLen = anlyDevice ? anlyDevice.length : 0;                var len = anlyDeviceKey ? anlyDeviceKey.length : 0;                if(len < limitDeviceChart.key){                    if(devLen > 1){                        var tmp = [];                        tmp.push(key);                        $scope.anlyDeviceKey = tmp;                    }else{                        var anlyData = anlyDeviceKey ? JSON.stringify(anlyDeviceKey) : $scope.anlyDeviceKey = [];                        if((anlyData && (anlyData.indexOf(key) < 0)) || !anlyData){                            $scope.anlyDeviceKey.push(key);                        };                    };                }else{                    httpService.myAlert('info',$filter('chFilter')('selected_device_max','data-inside',limitDeviceChart.key));//"最多选择" + limitDeviceChart.key + "个对比项！"                };            };            // 删除对比项            $scope.delDeviceKey = function (key) {                var anlyDeviceKey = $scope.anlyDeviceKey;                var dev = anlyDeviceKey[key];                $scope.anlyDeviceKey.splice(key,1);            };            // 保存选择结果            $scope.save = function() {                chartService.setDeviceAnly($scope.anlyDevice);                chartService.setKeyAnly($scope.anlyDeviceKey);            };        }    ])    // 确认弹窗    // .controller('sure.ctrl',[    //     '$scope','$filter', 'httpService','act', 'currentUrl', 'myData','$rootScope','$state',    //     function ($scope,$filter, httpService, act, currentUrl, myData,$rootScope,$state) {    //         var toDo = act[0];    //         $scope.sureText = act[1];    //         $scope.surePic = act[2];    //         $scope.save = function () {    //             if(toDo === "deviceSet"){// 修改设备配置信息    //                 doPut("put",currentUrl,myData);    //                 angular.element('#curDBEdit').remove();    //             }    //             else if(toDo === "biological"){// 修改生物信息    //                 doPut("post",currentUrl,myData);    //                 angular.element('#curDBEdit').remove();    //                 $rootScope.$emit('biologicalRefresh',"refresh biological");    //             }    //             else if(toDo === "delete"){// 删除用户    //                 doDelete(currentUrl);    //                 angular.element('#myModal').remove();    //             }    //             else if(toDo === "deleteFence"){//删除围栏    //                 deleteFence(currentUrl);    //             }    //             else if(toDo === "back"){    //                 history.go(-1);    //             }    //             else if(toDo === "refreshDevice"){    //                 $rootScope.$emit('refreshFence');    //                 $state.go("fence.edit.device");    //             }else if(toDo === "removeFence"){    //                 $rootScope.$emit('removeFence',currentUrl,myData);    //             };    //         };    //         $scope.cancel = function () {    //             if(toDo === "refreshDevice"){    //                 $state.go("fence.edit.device");    //             }    //         }    //         function deleteFence(url) {    //             var fence = myData.name;    //             httpService.set("delete",url).then(function (response) {    //                 var deleteFenceTips = $filter("chFilter")("delete_fence_success","fence",fence);    //                 httpService.myAlert('success',deleteFenceTips);    //                 history.go(-1);    //             },function (response) {    //                 httpService.error(response);    //             });    //         }    //         // 删除用户    //         function doDelete(url) {    //             httpService.set("delete",url).then(function(response) {    //                 // success    //                 httpService.myAlert("success", $filter('chFilter')('deleted_user','data-inside',myData.username));//"成功删除用户"+ myData.username +"!"    //                 $rootScope.$emit('companyUserRefresh',"refresh my account info");    //             }, function(response) {    //                 // error    //                 httpService.error(response);    //             });    //         };    //         // 修改设备信息    //         function doPut(act,url,data) {    //             httpService.set(act,url,data).then(function(response) {    //                 // success    //                 httpService.myAlert("success", $filter('chFilter')('change_success'));    //             }, function(response) {    //                 // error    //                 var resCode = response.status;    //                 httpService.error(response);    //             });    //         };    // }])    .controller('confirm.ctrl',[        '$scope','$filter', 'httpService','confirmParams','$rootScope','$state',        function ($scope,$filter, httpService, confirmParams,$rootScope,$state) {            $scope.sureTitle = confirmParams.title;            $scope.sureText = confirmParams.content;            $scope.surePic = confirmParams.image;            var confirmEvent = confirmParams.event;            $scope.save = function () {                console.log('confirm sure');                $scope.confirmSure(confirmEvent);                // $rootScope.$emit(confirmEvent,true);            };            $scope.cancel = function () {                console.log('confirm cancel');                $scope.confirmCancel(confirmEvent);                // $rootScope.$emit(confirmEvent,false);            }        }])    ;}(app);